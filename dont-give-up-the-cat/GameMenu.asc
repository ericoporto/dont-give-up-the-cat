// new module script
#define THEMED_BTN_COUNT 21
#define SAVESLOT_COUNT 6
#define SAVESLOT_IMAGE_WIDTH 102
#define SAVESLOT_IMAGE_HEIGHT 53

struct ThemedButton{
  Button* btn;
  DynamicSprite* Sprite_Normal;
  DynamicSprite* Sprite_Over;
  DynamicSprite* Sprite_Pushed;
};

struct SaveSlotDescritption {
  int RealSaveSlot;
  bool IsAutosave;
  String Time;
  String Date;
  String Place;
  DynamicSprite* Sprite;
  Button* save_trash_btn;
  Button* load_trash_btn;
};

int _themed_btn_count;
ThemedButton _themed_btn[THEMED_BTN_COUNT];
SaveSlotDescritption _saveslot[SAVESLOT_COUNT];
ThemedButton _themed_save_btn[SAVESLOT_COUNT];
ThemedButton _themed_load_btn[SAVESLOT_COUNT];
int _selectedSaveslot;
int _selectedSaveslotToDelete;

bool _previousMouseVisibility;

void _ClearAllThemedStuff()
{
  // deletes all sprites to avoid warnings
  for(int i=0; i<THEMED_BTN_COUNT; i++)
  {
    Button* btn = _themed_btn[i].btn;
    
    if(btn != null) {
      btn.NormalGraphic = 0;
      btn.PushedGraphic = 0;
      btn.MouseOverGraphic = 0;
    }
    DynamicSprite* spr = null;
    spr = _themed_btn[i].Sprite_Normal;
    if(spr != null) {
      spr.Delete();
      _themed_btn[i].Sprite_Normal = null;
    }
    spr = _themed_btn[i].Sprite_Over;
    if(spr != null) {
      spr.Delete();
      _themed_btn[i].Sprite_Over = null;
    }
    spr = _themed_btn[i].Sprite_Pushed;
    if(spr != null) {
      spr.Delete();
      _themed_btn[i].Sprite_Pushed = null;
    }    
  }
    
  for(int i=0; i<SAVESLOT_COUNT; i++)
  {
    Button* btn = null;
    DynamicSprite* spr = null;
    
    btn = _themed_save_btn[i].btn;    
    if(btn != null) {
      btn.NormalGraphic = 0;
      btn.PushedGraphic = 0;
      btn.MouseOverGraphic = 0;
    }
    spr = _themed_save_btn[i].Sprite_Normal;
    if(spr != null) {
      spr.Delete();
      _themed_save_btn[i].Sprite_Normal = null;
    }
    spr = _themed_save_btn[i].Sprite_Over;
    if(spr != null) {
      spr.Delete();
      _themed_save_btn[i].Sprite_Over = null;
    }
    spr = _themed_save_btn[i].Sprite_Pushed;
    if(spr != null) {
      spr.Delete();
      _themed_save_btn[i].Sprite_Pushed = null;
    }    
    
    btn = _themed_load_btn[i].btn;    
    if(btn != null) {
      btn.NormalGraphic = 0;
      btn.PushedGraphic = 0;
      btn.MouseOverGraphic = 0;
    } 
    spr = _themed_load_btn[i].Sprite_Normal;
    if(spr != null) {
      spr.Delete();
      _themed_load_btn[i].Sprite_Normal = null;
    }
    spr = _themed_load_btn[i].Sprite_Over;
    if(spr != null) {
      spr.Delete();
      _themed_load_btn[i].Sprite_Over = null;
    }
    spr = _themed_load_btn[i].Sprite_Pushed;
    if(spr != null) {
      spr.Delete();
      _themed_load_btn[i].Sprite_Pushed = null;
    }
    
    spr = _saveslot[i].Sprite;
    if(spr != null) {
      spr.Delete();
      _saveslot[i].Sprite = null;
    }
    spr = null;
  }  
}

/*
void _draw_text(DrawingSurface* surf, int text_x, int text_y, int color, int border_color, FontType font, String txt)
{
  surf.DrawingColor = border_color; 
  surf.DrawString(text_x-1, text_y, font, txt);
  surf.DrawString(text_x+1, text_y, font, txt);
  surf.DrawString(text_x, text_y-1, font, txt);
  surf.DrawString(text_x, text_y+1, font, txt);
    
  surf.DrawingColor = color;
  
  surf.DrawString(text_x, text_y, font, txt);  
}

void _theme_menu_btn(Button* btn)
{
  FontType font = eFontMenu;
  String txt = btn.Text;
  int btn_w = btn.Width;
  int btn_h = btn.Height;
  btn.Text = "";
  int text_x = (btn_w - GetTextWidth(txt, font))/2;
  int text_y = (btn_h - GetTextHeight(txt, font, btn_w))/2;
  
  DrawingSurface* surf;
  DynamicSprite* spr_n = DynamicSprite.Create(btn_w, btn_h, true);
  DynamicSprite* spr_p = DynamicSprite.Create(btn_w, btn_h, true);
  DynamicSprite* spr_o = DynamicSprite.Create(btn_w, btn_h, true);
 
  _draw_text(spr_n.GetDrawingSurface(), text_x, text_y, 58801, 8457, font, txt);
  _draw_text(spr_p.GetDrawingSurface(), text_x+1, text_y+1, 58801, 12715, font, txt);
  _draw_text(spr_o.GetDrawingSurface(), text_x, text_y, 52106, 8457, font, txt);
 
  btn.NormalGraphic = spr_n.Graphic;
  btn.MouseOverGraphic = spr_o.Graphic;
  btn.PushedGraphic = spr_p.Graphic;
  
  _themed_btn[_themed_btn_count].btn = btn;
  _themed_btn[_themed_btn_count].Sprite_Normal = spr_n;
  _themed_btn[_themed_btn_count].Sprite_Over = spr_o;
  _themed_btn[_themed_btn_count].Sprite_Pushed = spr_p;
  _themed_btn_count++; 
}

void game_start()
{
  _theme_menu_btn(btn_menu_exit_to_menu);
  _theme_menu_btn(btn_menu_quit);
  _theme_menu_btn(btn_menu_resume);
  _theme_menu_btn(btn_menu_save);
}*/


// new module script


bool _hasContinue(){
  ListBoxSaves.Clear();
  ListBoxSaves.FillSaveGameList();
  return ListBoxSaves.ItemCount > 0;
}

bool _IsTitleMenu()
{
  return player.Room == 2;
}

void _AdjustWindowedBtnVisibility()
{  
  menu_opt_btn_wind.Visible = !System.Windowed;
  menu_opt_btn_full.Visible = System.Windowed;
}

void _AdjustObjectiveLabelVis()
{
  Objective.SetVisible(!_IsTitleMenu() && bool_show_game_objectives);
}

void _AdjustShowObjVisibility()
{
  menu_opt_btn_objs_t.Visible = bool_show_game_objectives;
  menu_opt_btn_objs_f.Visible = !bool_show_game_objectives;
  _AdjustObjectiveLabelVis();
}

void _RefreshShowResumeButton()
{
  if(_IsTitleMenu())
  {
    ListBoxSaves.FillSaveGameList();
    menu_btn_continue.Visible = ListBoxSaves.ItemCount > 0;
  }
  else
  {
    menu_btn_continue.Visible = true;
  }
}

int _GetEmptySlot()
{
  for(int slot=1; slot<SAVESLOT_COUNT+1; slot++)
  {
    bool collided = false;
    for(int i=0; i<SAVESLOT_COUNT; i++)
    {
      if(_saveslot[i].RealSaveSlot == slot) {
        collided = true;
        break;
      }
    }
    if(!collided)
      return slot;
  }
}

void _RefreshSaveSlots()
{
  _RefreshShowResumeButton();
  ListBoxSaves.FillSaveGameList();
  
  int final_filled=-1;
  for(int i=0; i<ListBoxSaves.ItemCount && i<SAVESLOT_COUNT; i++)
  {
    final_filled = i;
    int slot = ListBoxSaves.SaveGameSlots[i];
    _saveslot[i].RealSaveSlot = slot;
    String descr = Game.GetSaveSlotDescription(slot);
    if(String.IsNullOrEmpty(descr)) continue;
    
    String sslotType = descr.Substring(0, descr.IndexOf("{"));
    String place = descr.Substring(descr.IndexOf("{") + 1, 
                                   descr.IndexOf("}") - descr.IndexOf("{") - 1);
    String hourmin = descr.Substring(descr.IndexOf("}") + 1, 
                                     descr.IndexOf("@") - descr.IndexOf("}") - 1);
    String date = descr.Substring(descr.IndexOf("@")+1, 
                                  descr.Length - descr.IndexOf("@") - 1);
    
    _saveslot[i].IsAutosave = sslotType.CompareTo("Autosave") == 0;
    _saveslot[i].Place = place;
    _saveslot[i].Time = hourmin;
    _saveslot[i].Date = date;
    
    _saveslot[i].save_trash_btn.Visible = true;
    _saveslot[i].load_trash_btn.Visible = true;
    
    _saveslot[i].Sprite = DynamicSprite.CreateFromSaveGame(slot, SAVESLOT_IMAGE_WIDTH, SAVESLOT_IMAGE_HEIGHT);
    if(_saveslot[i].Sprite == null) _saveslot[i].Sprite = DynamicSprite.Create(SAVESLOT_IMAGE_WIDTH, SAVESLOT_IMAGE_HEIGHT);
  }  
  for(int i=final_filled+1; i<SAVESLOT_COUNT; i++)
  {
    _saveslot[i].RealSaveSlot = -1;
    _saveslot[i].save_trash_btn.Visible = false;
    _saveslot[i].load_trash_btn.Visible = false;
    _saveslot[i].IsAutosave = false;
    _saveslot[i].Place = null;
    _saveslot[i].Time = null;
    _saveslot[i].Date = null;
    if(_saveslot[i].Sprite != null) {
      _saveslot[i].Sprite.Delete();
      _saveslot[i].Sprite = null;
    }
  }
}

DynamicSprite* _CreateNewSaveButtonSprite(int width, int height, int accent_color, int transparency)
{  
  DynamicSprite* spr = DynamicSprite.Create(width, height, true);
  DynamicSprite* tmpspr = DynamicSprite.Create(width, height, true);
  
  DrawingSurface* surf;
  
  FontType font = eFontk812j;
  int txt_color = accent_color;
  
  surf = tmpspr.GetDrawingSurface();  
  surf.Clear(accent_color);
  surf.DrawingColor = 14922;
  surf.DrawRectangle(2, 2, width - 4, height - 4);
  surf.DrawingColor = txt_color;
  surf.DrawStringWrapped(2, height/2 -8, width -4, font, eAlignCenter, "+New Save");
  surf.Release();
  
  surf = spr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr.Graphic, transparency);
  surf.Release();
  
  tmpspr.Delete();
    
  return spr;
}

DynamicSprite* _CreateSaveslotButtonSprite(int i, int width, int height, int accent_color, int transparency)
{
  if(_saveslot[i].RealSaveSlot < 0) return null;
  
  DynamicSprite* spr = DynamicSprite.Create(width, height, true);
  DynamicSprite* tmpspr = DynamicSprite.Create(width, height, true);
  
  
  DrawingSurface* surf;
  surf = tmpspr.GetDrawingSurface();
  
  String dateTime;
  dateTime = _saveslot[i].Time.Append("\n");
  dateTime = dateTime.Append(_saveslot[i].Date);
  
  FontType font = eFontk812j;
  int txt_color = accent_color;
  
  surf.Clear(accent_color);
  surf.DrawImage(2, 2, _saveslot[i].Sprite.Graphic, 0, width - 4, height - 4);
  surf.DrawingColor = txt_color;
  if(_saveslot[i].IsAutosave) surf.DrawStringWrapped(width/2-2, 2, width/2, font, eAlignRight, "Autosave");
  surf.DrawStringWrapped(2, 2, width/2, font, eAlignLeft, _saveslot[i].Place);
  surf.DrawStringWrapped(2, height-GetFontHeight(font)*2-4, width-4, font, eAlignCenter, dateTime);
  surf.Release();
  
  surf = spr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr.Graphic, transparency);
  surf.Release();
  
  tmpspr.Delete();
    
  return spr;
}

void _RegenerateSaveButtons()
{
  _RefreshSaveSlots();
  bool once = false;
  for(int i=0; i<SAVESLOT_COUNT; i++)
  {
    int slot = _saveslot[i].RealSaveSlot;
    if(slot < 0)
    {
      _themed_save_btn[i].btn.Visible = false;
      _themed_save_btn[i].btn.NormalGraphic = 0;
      _themed_save_btn[i].btn.PushedGraphic = 0;
      _themed_save_btn[i].btn.MouseOverGraphic = 0;
    }
    
    if(_themed_save_btn[i].Sprite_Normal != null)
    {
      _themed_save_btn[i].Sprite_Normal.Delete();
      _themed_save_btn[i].Sprite_Normal = null;
    }
    if(_themed_save_btn[i].Sprite_Pushed != null)
    {
      _themed_save_btn[i].Sprite_Pushed.Delete();
      _themed_save_btn[i].Sprite_Pushed = null;
    }
    if(_themed_save_btn[i].Sprite_Over != null)
    {
      _themed_save_btn[i].Sprite_Over.Delete();
      _themed_save_btn[i].Sprite_Over = null;
    }
    
    
    if(slot < 0 && !once)
    {
      once = true;
      
      int w = SAVESLOT_IMAGE_WIDTH; //_themed_save_btn[i].btn.Width;
      int h = SAVESLOT_IMAGE_HEIGHT; //_themed_save_btn[i].btn.Height;
      _themed_save_btn[i].Sprite_Normal = _CreateNewSaveButtonSprite(w, h, 57051, 15);
      _themed_save_btn[i].Sprite_Over = _CreateNewSaveButtonSprite(w, h, 65535, 0);
      _themed_save_btn[i].Sprite_Pushed = _CreateNewSaveButtonSprite(w, h, 57215, 0);
      _themed_save_btn[i].btn.NormalGraphic = _themed_save_btn[i].Sprite_Normal.Graphic;
      _themed_save_btn[i].btn.MouseOverGraphic = _themed_save_btn[i].Sprite_Over.Graphic;
      _themed_save_btn[i].btn.PushedGraphic = _themed_save_btn[i].Sprite_Pushed.Graphic;
      _themed_save_btn[i].btn.Visible = true;
      _themed_save_btn[i].btn.Text = "";      
    }
    
    if(slot > 0) // this is NOT an else of the above!!!
    {
      _themed_save_btn[i].btn.Visible = true;
      int w = SAVESLOT_IMAGE_WIDTH; // _themed_save_btn[i].btn.Width;
      int h = SAVESLOT_IMAGE_HEIGHT; //_themed_save_btn[i].btn.Height;
      _themed_save_btn[i].Sprite_Normal = _CreateSaveslotButtonSprite(i, w, h, 57051, 15);
      _themed_save_btn[i].Sprite_Over = _CreateSaveslotButtonSprite(i, w, h, 65535, 0);
      _themed_save_btn[i].Sprite_Pushed = _CreateSaveslotButtonSprite(i, w, h, 57215, 0);
      _themed_save_btn[i].btn.NormalGraphic = _themed_save_btn[i].Sprite_Normal.Graphic;
      _themed_save_btn[i].btn.MouseOverGraphic = _themed_save_btn[i].Sprite_Over.Graphic;
      _themed_save_btn[i].btn.PushedGraphic = _themed_save_btn[i].Sprite_Pushed.Graphic;
      _themed_save_btn[i].btn.Text = "";
    }
  }
}

void _RegenerateLoadButtons()
{
  _RefreshSaveSlots();
  for(int i=0; i<SAVESLOT_COUNT; i++)
  {
    int slot = _saveslot[i].RealSaveSlot;
    if(slot < 0)
    {
      _themed_load_btn[i].btn.Visible = false;
      _themed_load_btn[i].btn.NormalGraphic = 0;
      _themed_load_btn[i].btn.PushedGraphic = 0;
      _themed_load_btn[i].btn.MouseOverGraphic = 0;
    }
    
    if(_themed_load_btn[i].Sprite_Normal != null)
    {
      _themed_load_btn[i].Sprite_Normal.Delete();
      _themed_load_btn[i].Sprite_Normal = null;
    }
    if(_themed_load_btn[i].Sprite_Pushed != null)
    {
      _themed_load_btn[i].Sprite_Pushed.Delete();
      _themed_load_btn[i].Sprite_Pushed = null;
    }
    if(_themed_load_btn[i].Sprite_Over != null)
    {
      _themed_load_btn[i].Sprite_Over.Delete();
      _themed_load_btn[i].Sprite_Over = null;
    }
    
    if(slot >= 0)
    {
      _themed_load_btn[i].btn.Visible = true;
      int w = SAVESLOT_IMAGE_WIDTH; //_themed_load_btn[i].btn.Width;
      int h = SAVESLOT_IMAGE_HEIGHT; //_themed_load_btn[i].btn.Height;
      _themed_load_btn[i].Sprite_Normal = _CreateSaveslotButtonSprite(i, w, h, 57051, 15);
      _themed_load_btn[i].Sprite_Over = _CreateSaveslotButtonSprite(i, w, h, 65535, 0);
      _themed_load_btn[i].Sprite_Pushed = _CreateSaveslotButtonSprite(i, w, h, 57215, 0);
      _themed_load_btn[i].btn.NormalGraphic = _themed_load_btn[i].Sprite_Normal.Graphic;
      _themed_load_btn[i].btn.MouseOverGraphic = _themed_load_btn[i].Sprite_Over.Graphic;
      _themed_load_btn[i].btn.PushedGraphic = _themed_load_btn[i].Sprite_Pushed.Graphic;
      _themed_load_btn[i].btn.Text = "";
    }
  }
}

void _HideTitle()
{
  if(_IsTitleMenu()) gTitle.Visible = false;
}

void _ShowTitle()
{
  if(_IsTitleMenu()) gTitle.Visible = true;  
}

void _ShowMenu()
{
  if(gMenu.Visible) return;
  
  _AdjustObjectiveLabelVis();
  
  if(_IsTitleMenu()) {
    menu_btn_new.Visible = true;
    menu_btn_save.Visible = false;
    menu_btn_continue.Visible = _hasContinue();
    _previousMouseVisibility = true;    
  } else {
    menu_btn_new.Visible = false;
    menu_btn_save.Visible = true;
    menu_btn_continue.Visible = true;
    _previousMouseVisibility = mouse.Visible;
  }
  
  mouse.Visible = true;
  gMenu.Visible = true;
}

void _HideMenuOnRestore()
{  
  if(gMenu.Visible) {
    gMenu.Visible = false;
    gMenu_LoadGame.Visible = false;
    gMenu_SaveGame.Visible = false;
    mouse.Visible = false;
    _AdjustObjectiveLabelVis();
  }
}

void _HideMenu()
{
  if(_IsTitleMenu()) return;
  
  if(gMenu.Visible) {
    gMenu.Visible = false;
    gMenu_LoadGame.Visible = false;
    gMenu_SaveGame.Visible = false;
    mouse.Visible = _previousMouseVisibility;
    mouse.SetPosition(Screen.Width/2, Screen.Height/2);
  }
}

void _DoBack(GUI* guiToBack)
{
  //Sound_SFXPlay(aCancel);
  gMenu.Transparency = 0;
  guiToBack.Visible = false;  
  _ShowTitle();
}

void _DoForward(GUI* guiToAdvance)
{
  gMenu.Transparency = 85;
  _HideTitle();
  guiToAdvance.Visible = true; 
  guiToAdvance.Transparency = 0;
  //Sound_SFXPlay(aAccept); 
}

void _Menu_m_New()
{
  _DoForward(gMenu_NewGame);
}

void _Menu_m_Save()
{
  _RegenerateSaveButtons();
  _DoForward(gMenu_SaveGame);
}

void _Menu_m_Load()
{
  _RegenerateLoadButtons();
  _DoForward(gMenu_LoadGame);
}

void _Menu_m_Opt()
{
  GameConfig.LoadCFG();
  _AdjustShowObjVisibility();
  _AdjustWindowedBtnVisibility();
  _DoForward(gMenu_Options);  
}

void _Menu_m_Exit()
{
  _DoForward(gMenu_Exit);
  if(!gMenu.Visible) {
    _previousMouseVisibility = mouse.Visible;
    mouse.Visible = true;
    mouse.SetPosition(Screen.Width/2, Screen.Height/2);
  }
}

void _Menu_m_Controls()
{
  _DoForward(gMenu_Controls);  
}

void _Menu_m_Continue()
{
  if(_IsTitleMenu())
  {
    ListBoxSaves.FillSaveGameList();
    if(ListBoxSaves.ItemCount > 0) {
      RestoreGameSlot(ListBoxSaves.SaveGameSlots[0]);
    }
  }
  else
  {
    _HideMenu();
  }
}

void _Menu_exit_yes()
{
  _ClearAllThemedStuff();
    // HACK,  FIX WHEN WE HAVE A GAME MENU
    //QuitGame(0);
   // return;
    
    
  if(_IsTitleMenu())
  {
    QuitGame(0);
  }
  else
  {
    RestartGame();  
  }
}

void _Menu_exit_no()
{
  if(!gMenu.Visible) {
    mouse.Visible = _previousMouseVisibility;
    mouse.SetPosition(Screen.Width/2, Screen.Height/2);
  }
  _DoBack(gMenu_Exit);
}

void _Menu_newGame_no()
{
  _DoBack(gMenu_NewGame);
}

void _Menu_loadGame_back()
{
  _DoBack(gMenu_LoadGame);
}

void _Menu_saveGame_back()
{
  _DoBack(gMenu_SaveGame);
}

void _Menu_opt_back()
{
  GameConfig.SaveCFG();
  _DoBack(gMenu_Options);
}

void _Menu_ctrl_back()
{
  _DoBack(gMenu_Controls);  
}

void _Menu_opt_fullscreen()
{
  System.Windowed = false;
  _AdjustWindowedBtnVisibility();
}

void _Menu_opt_windowed()
{
  System.Windowed = true;
  _AdjustWindowedBtnVisibility();
}

void _Menu_opt_objectives_t()
{
  bool_show_game_objectives = false;
  _AdjustShowObjVisibility();
}

void _Menu_opt_objectives_f()
{
  bool_show_game_objectives = true;
  _AdjustShowObjVisibility();
}

void _Menu_newGame_yes()
{
  Sound_SFXPlay(aNew_game);
  gMenu.Transparency = 0;
  gMenu_NewGame.Visible = false;
  Sound_MusicFadeOut(0.4);
  Wait(SecondsToLoops(0.2));
  FadeOut(2);
  player.ChangeRoom(3);
}

void _Menu_loadGame_s(int slot)
{
  slot = slot -1;
  _selectedSaveslot = slot;
  slot = _saveslot[slot].RealSaveSlot;
  RestoreGameSlot(slot);
}

void _Menu_saveGame_s(int slot)
{
  slot = slot -1;
  slot = _saveslot[slot].RealSaveSlot;
  if(slot < 0) slot = _GetEmptySlot();
  CustomSave.Save(slot);
  gMenu.Transparency = 0;
  gMenu_SaveGame.Visible = false;  
}

void _Menu_deleteSave_s(int slot)
{
  if(gMenu_SaveGame.Visible) gMenu_SaveGame.Transparency = 85;
  if(gMenu_LoadGame.Visible) gMenu_LoadGame.Transparency = 85;
  
  //Sound_SFXPlay(aAccept); 
  slot = slot -1;
  String place = _saveslot[slot].Place;
  String time = _saveslot[slot].Time;
  String date = _saveslot[slot].Date;
  bool autosave = _saveslot[slot].IsAutosave;
  slot = _saveslot[slot].RealSaveSlot;
  _selectedSaveslotToDelete = slot;
  
  String message = "Really delete saveslot?\n";
  message = message.Append(place);
  message = message.Append("\n");
  
  if(autosave) message = message.Append("Autosave ");
  message = message.Append("At ");
  message = message.Append(time);
  message = message.Append("\n");
  
  message = message.Append("On day ");
  message = message.Append(date);
  message = message.Append("\n");
  
  label_delete_save.Text = message;
  gMenu_Delete_Save.Visible = true;
}

void _Menu_deleteSave_Yes()
{
 // Sound_SFXPlay(aAccept);
 // Sound_SFXPlay(aTrashbin);
  gMenu_Delete_Save.Visible = false; 
  
  if(_selectedSaveslotToDelete>=0) {
    DeleteSaveSlot(_selectedSaveslotToDelete);  
  }
  
  if(gMenu_SaveGame.Visible) {
    _RegenerateSaveButtons();
    gMenu_SaveGame.Transparency = 0;
  }
  if(gMenu_LoadGame.Visible) {
    _RegenerateLoadButtons();
    gMenu_LoadGame.Transparency = 0;
  }
}

void _Menu_deleteSave_No()
{
  //Sound_SFXPlay(aCancel);
  gMenu_Delete_Save.Visible = false;  
  
  if(gMenu_SaveGame.Visible) gMenu_SaveGame.Transparency = 0;
  if(gMenu_LoadGame.Visible) gMenu_LoadGame.Transparency = 0;
}

void _ToggleMenu()
{
  if(gMenu.Visible) _HideMenu();
  else _ShowMenu();
}

void _DoEscapeKey()
{
  if(gMenu_Exit.Visible) {
    _Menu_exit_no();
  } 
  else if(gMenu_LoadGame.Visible) {
    _Menu_loadGame_back();
  }
  else if(gMenu_SaveGame.Visible) {
    _Menu_saveGame_back();
  }
  else if(gMenu_Options.Visible) {
    _Menu_opt_back();
  }
  else if(gMenu_NewGame.Visible) {
    _Menu_newGame_no();
  }
  else if(gMenu_Controls.Visible) {
    _Menu_ctrl_back();
  }
  else {
    _ToggleMenu();
  }
}

void _DoAcceptKey()
{
  if(gMenu_Exit.Visible) {
    _Menu_exit_yes();
  } 
  else if(gMenu_NewGame.Visible) {
    _Menu_newGame_yes();
  }
}

// To work around the AGS bug where antialiasing "pokes holes" in semi-transparent canvases
void drawStringWrappedAA(this DrawingSurface*, int x, int y, int width, FontType font, Alignment alignment, String message, int transparency)
{
  DynamicSprite* textSprite = DynamicSprite.Create(this.Width, this.Height, true);
  DrawingSurface* textSurface = textSprite.GetDrawingSurface();
  textSurface.DrawingColor = this.DrawingColor;
  textSurface.DrawStringWrapped(x, y, width, font, alignment, message);
  textSurface.Release();
  this.DrawImage(0, 0, textSprite.Graphic, transparency);
  textSprite.Delete();
}

DynamicSprite* _ApplyThemeBtn(int bgcolor, int txtcolor, int border_color, int i)
{
  DynamicSprite* spr, tmpspr, tmpspr2, tmpspr3;
  DrawingSurface* surf;
  FontType font = _themed_btn[i].btn.Font;
  String txt = _themed_btn[i].btn.Text;
  Alignment align = _themed_btn[i].btn.TextAlignment;
  int width = _themed_btn[i].btn.Width;
  int height = _themed_btn[i].btn.Height;
  
  int text_height = GetTextHeight(txt, font, width);
  
  int text_y = (height-text_height)/2;
  
  spr = DynamicSprite.Create(width, height, true);
  tmpspr = DynamicSprite.Create(width, height, true);
  tmpspr2 = DynamicSprite.Create(width, height, true);
  tmpspr3 = DynamicSprite.Create(width, height, true);
  surf = tmpspr2.GetDrawingSurface();
  surf.Clear(bgcolor);
  surf.Release();
  
  surf = tmpspr3.GetDrawingSurface();
  surf.DrawingColor = border_color;
  surf.drawStringWrappedAA(-1,text_y,   width, font, align, txt, 0);
  surf.drawStringWrappedAA(1, text_y,   width, font, align, txt, 0);
  surf.drawStringWrappedAA(0, text_y-1, width, font, align, txt, 0);
  surf.drawStringWrappedAA(0, text_y+1, width, font, align, txt, 0);
  surf.Release();
  
  surf = tmpspr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr2.Graphic, 75);
  surf.DrawImage(0, 0, tmpspr3.Graphic, 0);
  surf.DrawingColor = txtcolor;
  surf.drawStringWrappedAA(0, text_y, width, font, align, txt, 0);
  surf.Release();
  tmpspr2.Delete();
  tmpspr3.Delete();
  
  surf = spr.GetDrawingSurface();
  surf.DrawImage(0, 0, tmpspr.Graphic, 0);
  surf.Release();
  tmpspr.Delete();
  return spr;
}

void _SetButtons()
{
  // order doesn't matter
  _themed_btn[0].btn = menu_btn_new;
  _themed_btn[1].btn = menu_btn_continue;
  _themed_btn[2].btn = menu_btn_save;
  _themed_btn[3].btn = menu_btn_load;
  _themed_btn[4].btn = menu_btn_exit;
  _themed_btn[5].btn = menu_btn_opt;  
  _themed_btn[6].btn = menu_btn_ctrl;  
  _themed_btn[7].btn = menu_exit_btn_no;
  _themed_btn[8].btn = menu_exit_btn_yes;  
  _themed_btn[9].btn = menu_newg_btn_no;
  _themed_btn[10].btn = menu_newg_btn_yes;  
  _themed_btn[11].btn = menu_load_btn_back;
  _themed_btn[12].btn = menu_save_btn_back;
  _themed_btn[13].btn = menu_opt_btn_back;
  _themed_btn[14].btn = menu_opt_btn_full;
  _themed_btn[15].btn = menu_opt_btn_wind;  
  _themed_btn[16].btn = menu_opt_btn_objs_f;
  _themed_btn[17].btn = menu_opt_btn_objs_t;  
  _themed_btn[18].btn = menu_ctrl_btn_back;
  _themed_btn[19].btn = menu_savedel_btn_no;
  _themed_btn[20].btn = menu_savedel_btn_yes;
  
  _themed_load_btn[0].btn = menu_load_btn_s1;
  _themed_load_btn[1].btn = menu_load_btn_s2;
  _themed_load_btn[2].btn = menu_load_btn_s3;
  _themed_load_btn[3].btn = menu_load_btn_s4;
  _themed_load_btn[4].btn = menu_load_btn_s5;
  _themed_load_btn[5].btn = menu_load_btn_s6;
  
  _themed_save_btn[0].btn = menu_save_btn_s1;
  _themed_save_btn[1].btn = menu_save_btn_s2;
  _themed_save_btn[2].btn = menu_save_btn_s3;
  _themed_save_btn[3].btn = menu_save_btn_s4;
  _themed_save_btn[4].btn = menu_save_btn_s5;
  _themed_save_btn[5].btn = menu_save_btn_s6;
  
  _saveslot[0].save_trash_btn = menu_thrsh_save_btn1;
  _saveslot[0].load_trash_btn = menu_thrsh_load_btn1;  
  _saveslot[1].save_trash_btn = menu_thrsh_save_btn2;
  _saveslot[1].load_trash_btn = menu_thrsh_load_btn2;  
  _saveslot[2].save_trash_btn = menu_thrsh_save_btn3;
  _saveslot[2].load_trash_btn = menu_thrsh_load_btn3;  
  _saveslot[3].save_trash_btn = menu_thrsh_save_btn4;
  _saveslot[3].load_trash_btn = menu_thrsh_load_btn4;  
  _saveslot[4].save_trash_btn = menu_thrsh_save_btn5;
  _saveslot[4].load_trash_btn = menu_thrsh_load_btn5;  
  _saveslot[5].save_trash_btn = menu_thrsh_save_btn6;
  _saveslot[5].load_trash_btn = menu_thrsh_load_btn6;
}

void _ApplyTheme()
{
  int bgcolor_normal = 46846;
  int bgcolor_ovr = 46584;
  int bgcolor_pushed = 35986;
  
  int txtcolor_normal = 58801;
  int txtcolor_ovr = 58801;
  int txtcolor_pushed = 52106;
  
  int txtcolor_border_normal = 8457;
  int txtcolor_border_ovr = 12715;
  int txtcolor_border_pushed = 8457;
  
  
  for(int i=0; i<THEMED_BTN_COUNT; i++)
  {
    _themed_btn[i].Sprite_Normal = _ApplyThemeBtn(bgcolor_normal, txtcolor_normal, txtcolor_border_normal, i);
    _themed_btn[i].Sprite_Over = _ApplyThemeBtn(bgcolor_ovr, txtcolor_ovr, txtcolor_border_ovr, i);
    _themed_btn[i].Sprite_Pushed = _ApplyThemeBtn(bgcolor_pushed, txtcolor_pushed, txtcolor_border_pushed, i);

    _themed_btn[i].btn.NormalGraphic = _themed_btn[i].Sprite_Normal.Graphic;
    _themed_btn[i].btn.MouseOverGraphic = _themed_btn[i].Sprite_Over.Graphic;
    _themed_btn[i].btn.PushedGraphic = _themed_btn[i].Sprite_Pushed.Graphic;
    _themed_btn[i].btn.Text = "";
  }
}

static void Menu::OnClick(GUIControl *control, MouseButton button)
{
  if(button == eMouseLeft) {
    switch(control)
    {
      case menu_btn_new:
        _Menu_m_New();
      break;
      case menu_btn_save:
        _Menu_m_Save();
      break;
      case menu_btn_load:
        _Menu_m_Load();
      break;
      case menu_btn_opt:
        _Menu_m_Opt();
      break;
      case menu_btn_exit:
        _Menu_m_Exit();
      break;
      case menu_btn_continue:
        _Menu_m_Continue();
      break;
      case menu_btn_ctrl:
        _Menu_m_Controls();
      break;
      case menu_exit_btn_no:
        _Menu_exit_no();
      break;
      case menu_exit_btn_yes:
        _Menu_exit_yes();
      break;
      case menu_newg_btn_no:
        _Menu_newGame_no();
      break;
      case menu_newg_btn_yes:
        _Menu_newGame_yes();
      break;
      case menu_load_btn_back:
        _Menu_loadGame_back();
      break;
      case menu_load_btn_s1:
        _Menu_loadGame_s(1);
      break;
      case menu_load_btn_s2:
        _Menu_loadGame_s(2);
      break;
      case menu_load_btn_s3:
        _Menu_loadGame_s(3);
      break;
      case menu_load_btn_s4:
        _Menu_loadGame_s(4);
      break;
      case menu_load_btn_s5:
        _Menu_loadGame_s(5);
      break;
      case menu_load_btn_s6:
        _Menu_loadGame_s(6);
      break;
      case menu_save_btn_back:
        _Menu_saveGame_back();
      break;
      case menu_save_btn_s1:
        _Menu_saveGame_s(1);
      break;
      case menu_save_btn_s2:
        _Menu_saveGame_s(2);
      break;
      case menu_save_btn_s3:
        _Menu_saveGame_s(3);
      break;
      case menu_save_btn_s4:
        _Menu_saveGame_s(4);
      break;
      case menu_save_btn_s5:
        _Menu_saveGame_s(5);
      break;
      case menu_save_btn_s6:
        _Menu_saveGame_s(6);
      break;
      case menu_opt_btn_back:
        _Menu_opt_back();
      break;
      case menu_opt_btn_wind:
        _Menu_opt_windowed();
      break;
      case menu_opt_btn_full:
        _Menu_opt_fullscreen();
      break;
      case menu_opt_btn_objs_t:
        _Menu_opt_objectives_t();
      break;
      case menu_opt_btn_objs_f:
        _Menu_opt_objectives_f();
      break;
      case menu_ctrl_btn_back:
        _Menu_ctrl_back();
      break;
      case menu_thrsh_load_btn1:
      case menu_thrsh_save_btn1:
        _Menu_deleteSave_s(1);
      break;
      case menu_thrsh_load_btn2:
      case menu_thrsh_save_btn2:
        _Menu_deleteSave_s(2);
      break;
      case menu_thrsh_load_btn3:
      case menu_thrsh_save_btn3:
        _Menu_deleteSave_s(3);
      break;
      case menu_thrsh_load_btn4:
      case menu_thrsh_save_btn4:
        _Menu_deleteSave_s(4);
      break;
      case menu_thrsh_load_btn5:
      case menu_thrsh_save_btn5:
        _Menu_deleteSave_s(5);
      break;
      case menu_thrsh_load_btn6:
      case menu_thrsh_save_btn6:
        _Menu_deleteSave_s(6);
      break;
      case menu_savedel_btn_no:
        _Menu_deleteSave_No();
      break;
      case menu_savedel_btn_yes:
        _Menu_deleteSave_Yes();
      break;
    }
  }
}

static bool Menu::HasContinue()
{
  return _hasContinue();
}


static void Menu::Show()
{
  if(bool_block_menu) return;
  _ShowMenu();
}

static void Menu::Hide()
{
  _HideMenu();
}

void game_start()
{
  _SetButtons();
  _ApplyTheme();
  menu_btn_continue.Visible = _hasContinue();
  _AdjustWindowedBtnVisibility();
}
// called when a key is pressed

function on_key_press(eKeyCode keycode, int mod)
{ 
  if(bool_block_menu) return;
  
  if (keycode == eKeyEscape)
  {
    _DoEscapeKey();
  } 
  else if(keycode == eKeyReturn)
  {
    _DoAcceptKey();  
  }
  
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    _Menu_m_Exit();
  }
}

void on_event(EventType e, int d){ 
  if(e==eEventRestoreGame && d != 999)
  {
    CustomSave.cancelRestoreKP();
    _HideMenuOnRestore();
    mouse.Visible = gMenu.Visible;
    _previousMouseVisibility = false;
  }
}