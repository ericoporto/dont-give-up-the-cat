// room script file

DynamicSprite* frame_left, frame_right, frame_top, frame_bottom;
#define TREE_COUNT 96
Overlay* bg_tree[TREE_COUNT];
int bg_tree_initx[TREE_COUNT];
#define LETTER_COUNT 64
int letter_cnt;
Overlay* letter[LETTER_COUNT];
float letter_fase[LETTER_COUNT];
DynamicSprite* letter_spr[LETTER_COUNT];
Point* letter_circle_pos;
Point* letter_circle_size;
int letter_loop_frame;

void create_framing(int x, int y, int width, int height, int color, int scr_width, int scr_height, int baseline)
{
  int fleft_x, fleft_y, fleft_w, fleft_h;
  int fright_x, fright_y, fright_w, fright_h;
  int ftop_x, ftop_y, ftop_w, ftop_h;
  int fbottom_x, fbottom_y, fbottom_w, fbottom_h;
  DrawingSurface* surf;
  
  fleft_w = x;
  fleft_h = scr_height;  
  fleft_x = 0;
  fleft_y = fleft_h;  
  frame_left = DynamicSprite.Create(fleft_w, fleft_h);
  surf = frame_left.GetDrawingSurface();
  surf.Clear(color);
  surf.Release();
  oFrameLeft.Graphic = frame_left.Graphic;
  oFrameLeft.SetPosition(fleft_x, fleft_y);
  oFrameLeft.Baseline = baseline;
        
  fright_w = scr_width - width - x;
  fright_h = scr_height;  
  fright_x = x + width;
  fright_y = fright_h;
  frame_right = DynamicSprite.Create(fright_w, fright_h);
  surf = frame_right.GetDrawingSurface();
  surf.Clear(color);
  surf.Release();
  oFrameRight.Graphic = frame_right.Graphic;
  oFrameRight.SetPosition(fright_x, fright_y);
  oFrameRight.Baseline = baseline;
  
  ftop_w = width;
  ftop_h = y-height;  
  ftop_x = x;
  ftop_y = ftop_h;
  frame_top = DynamicSprite.Create(ftop_w, ftop_h);
  surf = frame_top.GetDrawingSurface();
  surf.Clear(color);
  surf.Release();
  oFrameTop.Graphic = frame_top.Graphic;
  oFrameTop.SetPosition(ftop_x, ftop_y);
  oFrameTop.Baseline = baseline;
  
  fbottom_w = width;
  fbottom_h = scr_height - y;  
  fbottom_x = x;
  fbottom_y = scr_height;
  frame_bottom = DynamicSprite.Create(fbottom_w, fbottom_h);
  surf = frame_bottom.GetDrawingSurface();
  surf.Clear(color);
  surf.Release();
  oFrameBottom.Graphic = frame_bottom.Graphic;
  oFrameBottom.SetPosition(fbottom_x, fbottom_y);
  oFrameBottom.Baseline = baseline;
}

function room_AfterFadeIn()
{

}

int getRandTreeX()
{  
  int tree_x = oSpinningCat.X - 32;
  int tree_range_x = Game.SpriteWidth[oSpinningCat.Graphic]+64;
  return tree_x + Random(tree_range_x);
}

void updateTrees()
{
  float final_x = IntToFloat(oSpinningCat.X + Game.SpriteWidth[oSpinningCat.Graphic]/2);
  for(int i=0; i<TREE_COUNT; i++)
  {
    if(bg_tree[i].Y < 0) {
      bg_tree[i].Y = Room.Height + 32;
      bg_tree[i].X = getRandTreeX();
      bg_tree_initx[i] = bg_tree[i].X;
    }
    
    bg_tree[i].Y -= 1;
    bg_tree[i].ZOrder = bg_tree[i].Y;
    float scale = ClampF(AbsF(IntToFloat(bg_tree[i].Y)/IntToFloat(Screen.Height)), 0.1, 1.0);
    //scale = ClampF(scale*scale, 0.1, 1.0);
    bg_tree[i].X = FloatToInt(Lerp(IntToFloat(bg_tree_initx[i]), final_x, scale*scale));
    
    bg_tree[i].Width = FloatToInt(IntToFloat(bg_tree[i].GraphicWidth) * scale * 2.0);
    bg_tree[i].Height = FloatToInt(IntToFloat(bg_tree[i].GraphicHeight) * scale * 2.0);    
  }  
}

void createTrees()
{
  for(int i=0; i<TREE_COUNT; i++)
  {
    bg_tree[i] = Overlay.CreateRoomGraphical(getRandTreeX(), Random(Room.Height+64), SPR_TREE_SMALL);
    bg_tree_initx[i] = bg_tree[i].X;
  }
  updateTrees();   
}

Point* GetCirclePos(float factor, int w, int h)
{
  Point* p = new Point;
  p.x = w/2 + FloatToInt(IntToFloat(w/2)*Maths.Cos(-2.0 * factor*Maths.Pi));
  p.y = h/2 + FloatToInt(IntToFloat(h/2)*Maths.Sin(-2.0 * factor*Maths.Pi));
  return p;
}

void updateLetters()
{
  int max_frm = 2048;
  letter_loop_frame++;
  if(letter_loop_frame>=max_frm) letter_loop_frame = 0;
  int frm = letter_loop_frame;
  
  float factor = IntToFloat(frm)/IntToFloat(max_frm);
  
  for(int i=0; i<letter_cnt; i++)
  {
    Point* p = GetCirclePos(factor+letter_fase[i], letter_circle_size.x , letter_circle_size.y);
    
    if(letter[i] == null) continue;
    
    letter[i].X = p.x + letter_circle_pos.x;
    letter[i].Y = p.y + letter_circle_pos.y;
    float scale = ClampF(AbsF(IntToFloat(p.y)/IntToFloat(letter_circle_size.y)), 0.1, 1.0);
    
    letter[i].Transparency = ClampI(FloatToInt((1.0 - scale) * 100.0), 0, 100);
    letter[i].Width = FloatToInt(IntToFloat(letter[i].GraphicWidth) * scale * 1.4);
    letter[i].Height = FloatToInt(IntToFloat(letter[i].GraphicHeight) * scale * 1.4);
  }
}

void createLetters()
{
  String title = "Don't Give Up the Cat           Don't Give Up the Cat          ";
  FontType font = eFontMenuOutline;
  int len = title.Length;
  letter_cnt = len;
  int offset = 16;
  letter_circle_size = new Point;
  letter_circle_size.x = 200;
  letter_circle_size.y = 100;
  letter_circle_pos = new Point;
  letter_circle_pos.x = oSpinningCat.X + Game.SpriteWidth[oSpinningCat.Graphic]/2 - letter_circle_size.x/2;
  letter_circle_pos.y = oSpinningCat.Y - Game.SpriteHeight[oSpinningCat.Graphic]/2 - letter_circle_size.y/2;
  
  for(int i=0; i<len; i++)
  {
    String letter_str = title.Substring(i, 1);
    if(letter_str == " ") continue;
    
    int w = GetTextWidth(letter_str, font) + 2;
    int h = GetTextHeight(letter_str, font, w + 8) + 2;
    
    DynamicSprite* spr = DynamicSprite.Create(w, h, true);
    DrawingSurface* surf = spr.GetDrawingSurface();
    surf.DrawingColor = 59295; // need to figure this
    surf.DrawString(1, 1, font, letter_str);
    surf.Release();
    letter_spr[i] = spr;
    
    letter_fase[i] = IntToFloat(i)/IntToFloat(len+offset);
    letter[i] = Overlay.CreateRoomGraphical(0, 0, spr.Graphic, true);
    letter[i].ZOrder = oSpinningCat.Baseline + 100 + i;
  }
  updateLetters();
}

void updateCat()
{
  int max_frm = 128;
  int frm = (Frame/3) % max_frm;
  int delta_spr = SPR_REVERSE_CAT_ANGLE_358 - SPR_REVERSE_CAT_ANGLE_000;
  oSpinningCat.Graphic = SPR_REVERSE_CAT_ANGLE_000 + (frm*delta_spr)/max_frm;
}

function room_Load()
{
  Sound_MusicPlay(aMusic_menu);
  gTitle.Visible = true;
  //oSpinningCat.Tint(255, 0, 0, 100, 100);
  oSpinningCat.SetView(VIEW_SPINNING_CAT, 0, 0);
  
  create_framing(oSpinningCat.X, oSpinningCat.Y, 
                Game.SpriteWidth[oSpinningCat.Graphic], Game.SpriteHeight[oSpinningCat.Graphic], 
                0, 
                Room.Width, Room.Height, 
                oSpinningCat.Baseline); 
  
  DrawingSurface* surf = Room.GetDrawingSurfaceForBackground();  
  surf.Clear(196);
  createTrees();
  createLetters();
  Menu.Show();
}

function room_Leave()
{
  Sound_MusicStop();
  gTitle.Visible = false;
  oFrameLeft.Graphic = 0;
  oFrameRight.Graphic = 0;
  oFrameTop.Graphic = 0;
  oFrameBottom.Graphic = 0;
  if(frame_left != null) frame_left.Delete();
  if(frame_right != null) frame_right.Delete();
  if(frame_top != null) frame_top.Delete();
  if(frame_bottom != null) frame_bottom.Delete();
  
  for(int i=0; i<LETTER_COUNT; i++)
  {
    if(letter[i] != null) {
      letter[i].Graphic = 0;
      letter[i].Remove();
    }
    
    if(letter_spr[i] != null) {
      letter_spr[i].Delete();
    }
  }
}

void repeatedly_execute_always()
{
  updateCat();
  updateTrees();
  updateLetters();
}