// new module script
float AbsF(float a)
{
  if(a<0.0) return -a;
  return a;
}

int AbsI(int a)
{
  if(a<0) return -a;
  return a;  
}

float MaxF(float a, float b)
{
  if (a > b)
    return a;
  return b;
}

float MinF(float a, float b)
{
  if (a < b)
    return a;
  return b;
}

float ClampF(float v, float min, float max)
{
  return MinF(max, MaxF(v, min));
}

float ClampLoopF(float v, float min, float max)
{
  if(v > max) return min;
  if(v < min) return max;
  return v;
}
 
int MaxI(int a, int b)
{
  if (a > b)
    return a;
  return b;
}

int MinI(int a, int b)
{
  if (a < b)
    return a;
  return b;
}

int ClampI(int v, int min, int max) 
{
  return MinI(max, MaxI(v, min));
}

int ClampLoopI(int v, int min, int max)
{
  if(v > max) return min;
  if(v < min) return max;
  return v;
}

float Lerp(float from, float to, float t) {
  return (from + (to - from) * t);
}

int GetDistance(int x1, int y1, int x2, int y2)
{
  int dx = x1-x2;
  int dy = y1-y2;
  return FloatToInt(Maths.Sqrt(IntToFloat(dx*dx+dy*dy)));
}

float NormalizeAngle(float theta) // I verified this is working
{
  if(theta >= -Maths.Pi && theta <= Maths.Pi) return theta;
  return theta - (2.0 * Maths.Pi) * IntToFloat(FloatToInt(((theta + Maths.Pi) / (2.0 * Maths.Pi))));
}

float TernaryF(bool expr, float v1, float v2)
{
  if(expr) return v1;
  return v2;
}