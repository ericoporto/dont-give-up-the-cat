// room script file
ZoneManager zManager;
Mode7World m7;
ScreenEffects screen_fx;

Mode7Object* o7home;
Mode7Object* o7player;
Mode7Object* o7grave_house;
Mode7Object* o7grave_flowers;
Mode7Object* o7grave_stones;
Mode7Object* o7plaque;

Mode7Object* o7ghost_floatingcat;
Mode7Object* o7ghost_forgotten;
Mode7Object* o7ghost_standingcat;

bool ghost_floatingcat_following, ghost_forgotten_following, ghost_standingcat_following;
bool ghost_floatingcat_senthome, ghost_forgotten_senthome, ghost_standingcat_senthome;

InputParams* hidPlayer;
Timer* t_onesec;
TerrainType last_tt;
SmokeFx home_smoke;
FireflyFx firefly_fx;
BreathingSfx breath_sfx;
Timer* t_delayed_autosave;
Timer* t_d_objective1;
int ghost_count;

// hacks for ending
bool _win_allowed;
bool _win_lock_camera;
bool _was_in_dialog;
bool _end_begin_done;

void update_m7wobjs_from_zmanager()
{
  m7.RemoveAllsObjects();
  
  zManager.ResetObjectActiveZones();
  Mode7Object* obj = zManager.GetNextObjectActiveZones();
  while(obj != null)
  {
    m7.AddExternalObject(obj);
    
    obj = zManager.GetNextObjectActiveZones();
  }
  m7.AddExternalObject(o7plaque);
  if(o7ghost_floatingcat != null) m7.AddExternalObject(o7ghost_floatingcat);
  if(o7ghost_forgotten != null) m7.AddExternalObject(o7ghost_forgotten);
  if(o7ghost_standingcat != null) m7.AddExternalObject(o7ghost_standingcat);
  for(int i=0; i<home_smoke.SmokeCount; i++) {
    m7.AddExternalObject(home_smoke.M7Object[i]);
  }
  for(int i=0; i<DANDELION_MAX; i++) {
    m7.AddExternalObject(dandelion_fx.M7Object[i]);
  }
  for(int i=0; i<FIREFLY_COUNT; i++) {
    m7.AddExternalObject(firefly_fx.M7Object[i]);
  }
}

void aproximate_o7_to_char_position(Character* c, Mode7Object* o7c, float lerp_factor)
{
  if(WorldToRoomX(o7c.X) != c.x && WorldToRoomY(o7c.Y) != c.y) {
    o7c.X = Lerp(o7c.X, RoomToWorldX(c.x), lerp_factor);
    o7c.Z = Lerp(o7c.Z, RoomToWorldZ(c.y), lerp_factor);
  }
}

void wind_update() {
  Hotspot* h = Hotspot.GetAtRoomXY(player.x, player.y);
  int ih = 0;
  if(h != null) ih = h.ID;
  
  Sound_WindVolume((100*(20-ih))/64);  
}

void _adjust_ghost_pos()
{
  float bump_factor = 18.0;
  float dx = o7player.X - o7home.X;
  float dz = o7player.Z - o7home.Z;
  float dy = o7player.Y - o7home.Y;
  
  float length = Maths.Sqrt(dx*dx + dz*dz + dy*dy);
  
  float norm_dx = dx / length;
  float norm_dz = dz / length;
  float norm_dy = dy / length;
  
  float gho_x = o7home.X + norm_dx * bump_factor;
  float gho_z = o7home.Z + norm_dz * bump_factor;
  float gho_y = o7home.Y + norm_dy * bump_factor;
  
  o7ghost_floatingcat.SetPosition(gho_x+3.0, gho_y, gho_z+3.0);
  o7ghost_standingcat.SetPosition(gho_x, gho_y, gho_z);
  o7ghost_forgotten.SetPosition(gho_x-3.0, gho_y, gho_z-3.0);
  
  cGhostFloatingcat.x = WorldToRoomX(o7ghost_floatingcat.X);
  cGhostFloatingcat.y = WorldToRoomY(o7ghost_floatingcat.Z);
  cGhostFloatingcat.PlaceOnWalkableArea();
  
  cGhostStandingcat.x = WorldToRoomX(o7ghost_standingcat.X);
  cGhostStandingcat.y = WorldToRoomY(o7ghost_standingcat.Z);
  cGhostStandingcat.PlaceOnWalkableArea();
  
  cGhostForgotten.x = WorldToRoomX(o7ghost_forgotten.X);
  cGhostForgotten.y = WorldToRoomY(o7ghost_forgotten.Z);
  cGhostForgotten.PlaceOnWalkableArea();  
}

void check_ghosts_delivered(Character* cGhost)
{  
  if(!_win_allowed && ghost_floatingcat_senthome && ghost_forgotten_senthome && ghost_standingcat_senthome) {
    Objective.Expire(eObjective_BringGhostHome1_3);
    Objective.Expire(eObjective_BringGhostHome2_3);
    Objective.Expire(eObjective_BringGhostHome3_3);
    Objective.Expire(eObjective_FindRemainingGhosts1);
    Objective.Expire(eObjective_FindRemainingGhosts2);
    Objective.Expire(eObjective_Explore);
    
    // SUCCESS
    _adjust_ghost_pos();
    // this is nonblocking rep always, so things will happen later 
    _win_lock_camera = true;
    _win_allowed = true;
  } else {
    // NOT YET 
    CustomSave.doAutoSave();
  }  
}

void set_dialog_camera(Mode7Object* obj, float y_factor)
{
  float bump_factor = 32.0;
  float y_result = o7player.Y + 1.0 + y_factor;
  float dx = o7player.X - obj.X;
  float dz = o7player.Z - obj.Z;
  float dy = y_result - obj.Y;
  
  float length = Maths.Sqrt(dx*dx + dz*dz + dy*dy);
   
  float norm_dx = dx / length;
  float norm_dz = dz / length;
  float norm_dy = dy / length;
  
  float tmp_cam_x = o7player.X + norm_dx * bump_factor;
  float tmp_cam_y = y_result + norm_dy * bump_factor;
  float tmp_cam_z = o7player.Z + norm_dz * bump_factor;
  float tmp_cam_teta = o7player.Angle;
  
  m7.TargetCamera(tmp_cam_x, tmp_cam_y, tmp_cam_z, tmp_cam_teta, eCameraTarget_FirstPerson);
}

void update_ghost_position(Character* cGhost, Mode7Object* o7Ghost, float medium_heigh, float float_range, int follow_dist, int follow_eagerness, TerrainType player_terrain)
{
  if(o7Ghost != null) {
    aproximate_o7_to_char_position(cGhost, o7Ghost, 0.2);
    
    if(o7Ghost.Visible) {
      float y_offset = 0.0;
      if(player_terrain == eTT_ClearanceHome) {
        if(cGhost.GetFollowingCharacter() != cHome) {
          if(GetDistance(player.x, player.y, cGhost.x, cGhost.y) <= 48) {
            cGhost.DoFollow(cHome, follow_dist, follow_eagerness);
            // HACK
            if(cGhost == cGhostFloatingcat) { 
              ghost_floatingcat_following = false; 
              ghost_floatingcat_senthome = true;
            }
            if(cGhost == cGhostForgotten) {
              ghost_forgotten_following = false;
              ghost_forgotten_senthome = true;
            }            
            if(cGhost == cGhostStandingcat) {
              ghost_standingcat_following = false; 
              ghost_standingcat_senthome = true;
            }
            if(cGhost) {
              if(!(ghost_floatingcat_following || ghost_forgotten_following || ghost_standingcat_following)) {
                Sound_MusicFadeOut(2.0);
              }
              switch(ghost_count) {
                case 1: Objective.Complete(eObjective_BringGhostHome1_3); Objective.SetCurrent(eObjective_FindRemainingGhosts2); break;
                case 2: Objective.Complete(eObjective_BringGhostHome2_3); Objective.Expire(eObjective_FindRemainingGhosts2); Objective.SetCurrent(eObjective_FindRemainingGhosts1); break;
                case 3: Objective.Complete(eObjective_BringGhostHome3_3); Objective.Expire(eObjective_FindRemainingGhosts1); Objective.SetCurrent(eObjective_None); break;
              }
              check_ghosts_delivered(cGhost);        
            }
          }
        } else {
          y_offset = 4.0;
        }
      }
      o7Ghost.Y = medium_heigh + y_offset + float_range*Maths.Sin(Maths.Pi * IntToFloat( Frame % 64)/ 32.0);
    }
  }
}

Mode7Object* invoke_ghost(Character* cGhost, Mode7Object* o7Grave, int invoke_offset_x, int invoke_offset_y,  int follow_dist, int follow_eagerness, int graphic)
{
  Mode7Object* o7Ghost;
  o7Ghost = m7.AddObject(
          FloatToInt(o7Grave.X)+invoke_offset_x, FloatToInt(o7Grave.Z)+invoke_offset_y, 0.36, graphic
          );
  cGhost.ChangeRoom(player.Room, WorldToRoomX(o7Ghost.X), WorldToRoomY(o7Ghost.Z));
  cGhost.DoFollow(player, follow_dist, follow_eagerness);
  t_delayed_autosave = Timer.StartRT(0.5, eOnce);
  return o7Ghost;
}



#region REGION_END_HACKS
void do_end_afterscene()
{
  
}

void do_end_begin()
{
  gEndCatDoor.Transparency = 100;
  gEndCatDoor.Visible = true;
  gEndCatDoor.TweenTransparency(1.0, 0, eEaseLinearTween, eBlockTween);
  if(o7ghost_floatingcat != null) o7ghost_floatingcat.Visible = false;
  if(o7ghost_forgotten != null) o7ghost_forgotten.Visible = false;
  if(o7ghost_standingcat != null) o7ghost_standingcat.Visible = false;
  o7ghost_floatingcat = null;
  o7ghost_forgotten = null;
  o7ghost_standingcat = null;
  update_m7wobjs_from_zmanager();
  Wait(SecondsToLoops(1.0));
  for(int i=0; i<m7.ObjectCount; i++) {
    hacks.StoreObjectsTemp(m7.Objects[i]);
  }
  Wait(SecondsToLoops(1.0));
  
  StartDialog(dEnding);
}

void game_end_update()
{  
  if(_win_lock_camera) {
    player.Walk(878, 770, eBlock, eWalkableAreas);
    _adjust_ghost_pos();
    _win_lock_camera = false;
    CustomSave.doAutoSave();
    return;
  } else if(!_end_begin_done) {
    // HACK,  there should be a prettier way to do this
    if(player.x > 861 && player.x < 898 && player.y > 674 && player.y < 691) {
      // player is at the door,  should win
      _end_begin_done = true;
      do_end_begin();
    }
  }
  
  if(_end_begin_done && !bool_in_dialog)
  {
    Wait(SecondsToLoops(1.0));
    Sound_MusicPlay(aMusic_ending);   
    CustomTransition_FadeOut(2.0, eBlockTween);
    gEndCatDoor.Visible = false;
    player.ChangeRoom(4);
  }
}

void game_end_update_always()
{
  if(_win_lock_camera) {
    m7.CameraAngleX = 0.0;
    o7player.Angle = 0.0;
    hidPlayer.AngleX = 0.0;
    hidPlayer.IgnoreOneDeltaCycle = true;
    aproximate_o7_to_char_position(player, o7player, 0.25);
    m7.TargetCamera(o7player.X, o7player.Y, o7player.Z, o7player.Angle, eCameraTarget_FirstPerson);
  }  
}
#endregion // REGION_END_HACKS

void every_second()
{
  GameSounds.UpdateForestAmbient(last_tt);
}

void begin_game(int tree_count)
{
  ghost_count = 0;
  mouse.Visible = gMenu.Visible;
  o7ghost_floatingcat = null;
  o7ghost_forgotten = null;

  screen_fx.Init();
  screen_fx.On = false;

  zManager.WorldWidth = Room.Width;
  zManager.WorldHeight = Room.Height;
  zManager.ZoneXYCount = 8;
    
  hidPlayer = InputParams.NewInputParams(1.4, 1.8, 3.8, 1.7);
  
  //o7player = zManager.AddObject(r2wX(886), r2wZ(734), 0.36, 2);
  o7player = zManager.AddObject(r2wX(player.x), r2wZ(player.y), 0.36, 2);
  o7player.Visible = false;
  o7player.Angle = Maths.Pi * 0.25;
  
  o7home = zManager.AddObject(r2wX(880), r2wZ(658), 1.5, 27);
  o7home.Y += 1.0;
  home_smoke.Init(880, 658);
  
  o7plaque = zManager.AddObject(r2wX(802), r2wZ(1568), 0.36, SPR_PLAQUE);
  
  dandelion_fx.Init();
  claw_fx.Init();
  firefly_fx.Init();
    
  o7grave_flowers = zManager.AddObject(r2wX(1509), r2wZ(470), 0.5, SPR_GRAVE_FLOWERS);
  o7grave_house = zManager.AddObject(r2wX(1140), r2wZ(1106), 0.36, SPR_GRAVE_HOUSE);
  o7grave_stones = zManager.AddObject(r2wX(457), r2wZ(1277), 0.5, SPR_GRAVE_STONES);
    
  PositionGenerator pgen;
  pgen.Init(Room.Width, Room.Height, 8);
  
  for(int i=0; i<tree_count; i++)
  {
    int obj_x, obj_y;
    TerrainType obj_terrain;
    do {
      Point* prand = pgen.Generate();
      obj_x = r2wX(prand.x);
      obj_y = r2wZ(prand.y);
      
      obj_terrain = GetTerrainAtRoomXY(w2rX(obj_x), w2rY(obj_y));
    } while (IsTerrainEmpty(obj_terrain));
    
    Mode7Object* m7obj = zManager.AddObject(obj_x, obj_y, 1.0, SpriteFromTerrainType(obj_terrain));
    if(m7obj.Graphic == SPR_GRASS_HIGH) m7obj.Y = -4.0;
  }
  
  update_m7wobjs_from_zmanager();
  
  m7.SetViewscreen(VIEW_SCREEN_WIDTH, VIEW_SCREEN_HEIGHT);
  m7.SetBgColor(BG_COLOR);
  m7.SetSkyColor(BG_COLOR);
  create_depth_fog(BG_COLOR, 10000);
  
  m7.SetHorizonSprite(SPR_HORIZON);
  skybox_create(BG_COLOR, SPR_HORIZON);
  m7.SetCamera(o7player.X, o7player.Y + 6.0, o7player.Z, 0.0, 0.0, 175.0);
  
  t_onesec = Timer.Start(GAME_SPEED, eRepeat);
  GameSounds.UpdateForestAmbient(last_tt);
  Sound_WindPlay(aWind);
  breath_sfx.Init();
}

void update_player(bool do_input)
{
  if(!bool_in_dialog || do_input) input_player(o7player, hidPlayer);
    
  m7.CameraAngleX = hidPlayer.AngleX;  
  m7.TargetCamera(o7player.X, o7player.Y+hidPlayer.OffsetY, o7player.Z, o7player.Angle, eCameraTarget_FirstPerson);
  
  zManager.UpdateCurrentPos(o7player.X, o7player.Z);
  player.x = WorldToRoomX(o7player.X);
  player.y = WorldToRoomY(o7player.Z);  
}

void update_game(bool do_input)
{  
  _was_in_dialog = bool_in_dialog;
  update_player(do_input);
  
  // HACK
  if(_win_allowed) {
    game_end_update();
  }
}

void update_game_always()
{
  if(_win_allowed) {
    game_end_update_always();
  }

  TerrainType player_terrain = GetTerrainAtRoomXY(player.x, player.y);
  screen_fx.On = ((player_terrain == eTT_ClearanceGFlowers && o7ghost_floatingcat == null) ||
    (player_terrain == eTT_ClearanceGHouse && o7ghost_forgotten == null) ||
    (player_terrain == eTT_ClearanceGStones && o7ghost_standingcat == null));
  
  if(zManager.ZoneChanged)
  {
    update_m7wobjs_from_zmanager();
  }
  
  // animate and position ghosts as needed
  update_ghost_position(cGhostFloatingcat, o7ghost_floatingcat, 24.0, 8.0, 5, 8, player_terrain);
  update_ghost_position(cGhostForgotten, o7ghost_forgotten, 22.0, 8.0, 5, 50, player_terrain);
  update_ghost_position(cGhostStandingcat, o7ghost_standingcat, 8.0, 4.0, 5, 40, player_terrain);
  
  // determine rotating objects sprite
  o7home.Graphic = GetGraphicFromAngle(m7.GetAngleObjectAndCamera(o7home), 2, SPR_HOME_ANGL_000, SPR_HOME_ANGL_358);
  
  m7.UpdateAndDrawObjects();  
  
  // skybox stuff
  m7.Draw();
  claw_fx.Update();
  home_smoke.Update();
  dandelion_fx.Update();
  firefly_fx.Update();
  screen_fx.Update();
  wind_update();
  breath_sfx.Update(hidPlayer);
  
  last_tt = player_terrain;  
}

// room events
function room_Load()
{
  //CustomTransition_IntantFadeOut();
  gScreen.Visible = true;
  begin_game(/* obj count*/ 4020);
  update_game(false);
}

function room_RepExec()
{
  if (IsGamePaused()) return;
  
  update_game(t_delayed_autosave == null);
  if(t_delayed_autosave != null && !t_delayed_autosave.IsActive) {
    t_delayed_autosave = null;
    CustomSave.doAutoSave();
  }
}

function on_mouse_click(MouseButton button)
{
  if (IsGamePaused()) return;
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  if (button == eMouseLeft) {
    if(claw_fx.Do())
    {
      float sin = Maths.Sin(Maths.DegreesToRadians(o7player.Angle));
      float cos = Maths.Cos(Maths.DegreesToRadians(o7player.Angle));
      float x = o7player.X + 8.0 * sin;
      float z = o7player.Z - 8.0 * cos;
      
      Mode7Object* obj = m7.GetObject(x, z, 32.0, CLAWABLE_GRAPHICS_COUNT, clawable_graphics);
      obj = clawn_object(obj);
      if(obj == null) return;
      if(hidPlayer != null && AbsF(hidPlayer.CurrentSpeed) > 0.5) return;
      bool found_ghost = false;
      if(obj == o7grave_flowers && o7ghost_floatingcat == null) {
        o7ghost_floatingcat = invoke_ghost(cGhostFloatingcat, o7grave_flowers, 1, 1, 5, 60, SPR_GHOST_FLOATINGCAT);
        set_dialog_camera(obj, 4.0);
        ghost_floatingcat_following = true;
        bool_found_ghost_floatingcat = true;
        Sound_MusicStop();
        Sound_MusicPlay(aMusic_walking_around);
        found_ghost = true;
        StartDialog(dFloatingcat);
      }
      if(obj == o7grave_house && o7ghost_forgotten == null) {
        o7ghost_forgotten = invoke_ghost(cGhostForgotten, o7grave_house, -2, -2, 5, 60, SPR_GHOST_FORGOTTEN);
        set_dialog_camera(obj, 1.0);
        ghost_forgotten_following = true;
        bool_found_ghost_forgotten = true;
        Sound_MusicStop();
        Sound_MusicPlay(aMusic_walking_around);
        found_ghost = true;
        StartDialog(dForgotten);
      }
      if(obj == o7grave_stones && o7ghost_standingcat == null) {        
        o7ghost_standingcat = invoke_ghost(cGhostStandingcat, o7grave_stones, 1, 2, 5, 60, SPR_GHOST_STANDINGCAT);
        set_dialog_camera(obj, -2.0);
        ghost_standingcat_following = true;
        bool_found_ghost_standingcat = true;
        Sound_MusicStop();
        Sound_MusicPlay(aMusic_walking_around);
        found_ghost = true;
        StartDialog(dStandingcat);
      }
      if(found_ghost) {
        ghost_count++;
        switch(ghost_count) {
          case 1: Objective.Complete(eObjective_Explore); Objective.SetCurrent(eObjective_BringGhostHome1_3); break;
          case 2: Objective.Complete(eObjective_FindRemainingGhosts2); Objective.SetCurrent(eObjective_BringGhostHome2_3); break;
          case 3: Objective.Complete(eObjective_FindRemainingGhosts1); Objective.SetCurrent(eObjective_BringGhostHome3_3); break;
        }
      }
    }
  }
}

void on_key_press(eKeyCode k, int mod) {
  //m7.DebugKeyPress(k); 
}

void repeatedly_execute_always()
{
  if(t_onesec.EvtExpired) every_second();
  
  if (IsGamePaused()) return;
  
  update_game_always();
}

void late_repeatedly_execute_always()
{
  if (IsGamePaused()) return;
  
  screen_fx.LateUpdate();
}

function room_Leave()
{
  gScreen.Visible = false;
  screen_fx.Destroy();
  destroy_fogs();
  firefly_fx.Destroy();
  breath_sfx.Destroy();
}

function room_AfterFadeIn()
{
  update_game(false);
  CustomTransition_FadeIn(1.0, eNoBlock, 1.0);
  t_delayed_autosave = Timer.StartRT(2.0, eOnce);
  Objective.SetCurrent(eObjective_Explore);
}
