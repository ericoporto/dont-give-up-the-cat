// new module script
#define CLAW_GO_UP_LEFT 30
#define CLAW_GO_UP_RIGHT 21
#define CLAW_GO_DOWN_LEFT 12
#define CLAW_GO_DOWN_RIGHT 3

#define CLAW_ANIM_SIZE 8
#define CLAW_INVALID_POS -300

// #define CLAW_WIDTH 96
// #define CLAW_HEIGHT 106
// #define CLAW_WIDTH_BIG 192
// #define CLAW_HEIGHT_BIG 212

#define CLAW_WIDTH 192
#define CLAW_HEIGHT 212

#define CLAW_WIDTH_BIG 288
#define CLAW_HEIGHT_BIG 318

protected void ClawFx::_begin_animate_claw(int initial_graphics)
{
  this._ovr_claw.X = (Screen.Width - CLAW_WIDTH)/2 -16 + Random(32);
  this._ovr_claw.Y =(Screen.Height - CLAW_HEIGHT)/2 -16 + Random(32);
  this._claw_width = CLAW_WIDTH;
  this._claw_height = CLAW_HEIGHT;
  this._ovr_claw.Graphic = initial_graphics;
  this._claw_last = initial_graphics;
}

void ClawFx::EnhanceFx()
{
  this._ovr_claw.X = (Screen.Width - CLAW_WIDTH_BIG)/2 -16 + Random(32);
  this._ovr_claw.Y =(Screen.Height - CLAW_HEIGHT_BIG)/2 -16 + Random(32);
  this._claw_width = CLAW_WIDTH_BIG;
  this._claw_height = CLAW_HEIGHT_BIG;
  this._ovr_claw.Graphic = this._claw_last;
}

bool ClawFx::Do()
{
  if(this._ovr_claw.X != CLAW_INVALID_POS) return false;
  
  int graphic = 0;
  int irand = Random(2);
  if(this._claw_last == CLAW_GO_UP_LEFT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_RIGHT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;      
    }
  } else if(this._claw_last == CLAW_GO_UP_RIGHT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;      
    }
  } else if(this._claw_last == CLAW_GO_DOWN_LEFT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;
      default:
        graphic = CLAW_GO_UP_RIGHT;
        break;      
    }
  } else {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_UP_RIGHT;
        break;      
    }
  }
  this._begin_animate_claw(graphic);
  return true;
}


void ClawFx::Init()
{
  this._ovr_claw = Overlay.CreateGraphical(CLAW_INVALID_POS, CLAW_INVALID_POS, CLAW_GO_UP_LEFT, true);
  this._claw_last = CLAW_GO_UP_LEFT;
  this._ovr_claw.ZOrder = 1024;
  this._ovr_claw.Width = CLAW_WIDTH_BIG;
  this._ovr_claw.Height = CLAW_HEIGHT_BIG;
}

void ClawFx::Update()
{
  if(this._ovr_claw.X == CLAW_INVALID_POS) return;
  if(this._claw_frame >= CLAW_ANIM_SIZE) {
    this._ovr_claw.X = CLAW_INVALID_POS;
    this._claw_frame = 0;
    return;
  }
  
  this._claw_frame++;
  this._ovr_claw.Graphic++;
  this._ovr_claw.Width = this._claw_width;
  this._ovr_claw.Height = this._claw_height;
}

ClawFx claw_fx;
export claw_fx;