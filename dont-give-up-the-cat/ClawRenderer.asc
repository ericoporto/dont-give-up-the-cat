// new module script
#define CLAW_GO_UP_LEFT 30
#define CLAW_GO_UP_RIGHT 21
#define CLAW_GO_DOWN_LEFT 12
#define CLAW_GO_DOWN_RIGHT 3

#define CLAW_ANIM_SIZE 8
#define CLAW_INVALID_POS -300

// #define CLAW_WIDTH 96
// #define CLAW_HEIGHT 106
// #define CLAW_WIDTH_BIG 192
// #define CLAW_HEIGHT_BIG 212

#define CLAW_WIDTH 192
#define CLAW_HEIGHT 212

#define CLAW_WIDTH_BIG 288
#define CLAW_HEIGHT_BIG 318

int _claw_last;
int _claw_frame;
int _claw_width;
int _claw_height;

Overlay* ovr_claw;

void _begin_animate_claw(int initial_graphics)
{
  ovr_claw.X = (Screen.Width - CLAW_WIDTH)/2 -16 + Random(32);
  ovr_claw.Y =(Screen.Height - CLAW_HEIGHT)/2 -16 + Random(32);
  _claw_width = CLAW_WIDTH;
  _claw_height = CLAW_HEIGHT;
  ovr_claw.Graphic = initial_graphics;
  _claw_last = initial_graphics;
}

void claw_success()
{
  ovr_claw.X = (Screen.Width - CLAW_WIDTH_BIG)/2 -16 + Random(32);
  ovr_claw.Y =(Screen.Height - CLAW_HEIGHT_BIG)/2 -16 + Random(32);
  _claw_width = CLAW_WIDTH_BIG;
  _claw_height = CLAW_HEIGHT_BIG;
  ovr_claw.Graphic = _claw_last;
}

bool do_claw()
{
  if(ovr_claw.X != CLAW_INVALID_POS) return false;
  
  int graphic = 0;
  int irand = Random(2);
  if(_claw_last == CLAW_GO_UP_LEFT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_RIGHT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;      
    }
  } else if(_claw_last == CLAW_GO_UP_RIGHT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;      
    }
  } else if(_claw_last == CLAW_GO_DOWN_LEFT) {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_RIGHT;
        break;
      default:
        graphic = CLAW_GO_UP_RIGHT;
        break;      
    }
  } else {
    switch(irand) {
      case 0:
        graphic = CLAW_GO_UP_LEFT;
        break;
      case 1:
        graphic = CLAW_GO_DOWN_LEFT;
        break;
      default:
        graphic = CLAW_GO_UP_RIGHT;
        break;      
    }
  }
  _begin_animate_claw(graphic);
  return true;
}


void game_start()
{
  ovr_claw = Overlay.CreateGraphical(CLAW_INVALID_POS, CLAW_INVALID_POS, CLAW_GO_UP_LEFT, true);
  _claw_last = CLAW_GO_UP_LEFT;
  ovr_claw.ZOrder = 1024;
  ovr_claw.Width = CLAW_WIDTH_BIG;
  ovr_claw.Height = CLAW_HEIGHT_BIG;
}

void repeatedly_execute_always()
{
  if(ovr_claw.X == CLAW_INVALID_POS) return;
  if(_claw_frame >= CLAW_ANIM_SIZE) {
    ovr_claw.X = CLAW_INVALID_POS;
    _claw_frame = 0;
    return;
  }
  
  _claw_frame++;
  ovr_claw.Graphic++;
  ovr_claw.Width = _claw_width;
  ovr_claw.Height = _claw_height;
}