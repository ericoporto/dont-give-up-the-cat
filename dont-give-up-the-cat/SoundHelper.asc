// new module script
int _previous_rnd, _previous_amb_rnd, _previous_ckt_rnd;
AudioChannel* _ac_mus, _ac_amb, _ac_ckt, _ac_wind, _ac_breath;
AudioClip* _queue_amb, _queue_ckt;

AudioClip* _GetNClip(int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5, AudioClip* ac_6) {
  switch(n) {
    case 1: return ac_2; break;
    case 2: return ac_3; break;
    case 3: return ac_4; break;
    case 4: return ac_5; break; 
    case 5: return ac_6; break;
    default: return ac_1; break;
  }
}

AudioClip* _GetRandomClip(int n, AudioClip* ac_1, AudioClip* ac_2, AudioClip* ac_3, AudioClip* ac_4, AudioClip* ac_5, AudioClip* ac_6) {
  int prev_n, rnd;
  AudioType type = ac_1.Type;  
  switch(type) {
    case eAudioTypeCrickets: prev_n = _previous_ckt_rnd; break;
    case eAudioTypeAmbientSound: prev_n = _previous_amb_rnd; break;
    default: prev_n = _previous_rnd; break;
  }
  
  do { rnd = Random(n-1); } while(rnd == prev_n);
  
  AudioClip* asfx = _GetNClip(rnd, ac_1, ac_2, ac_3, ac_4, ac_5, ac_6);
  switch(type) {
    case eAudioTypeCrickets: _previous_ckt_rnd = rnd; break;
    case eAudioTypeAmbientSound: _previous_amb_rnd = rnd; break;
    default: _previous_rnd = rnd; break;
  }
  return asfx;
}

// ---- PUBLIC INTERFACE BELOW ----

void Sound_SFXPlay(AudioClip* sfx, int volume)
{
  AudioChannel* ac = sfx.Play(eAudioPriorityHigh, eOnce);
  if(ac != null) ac.Volume = volume;
}

void Sound_SFXPlayRandom(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5, AudioClip* ac_6)
{
  AudioClip* aclip = _GetRandomClip(n, ac_1, ac_2, ac_3, ac_4, ac_5, ac_6);
  AudioChannel* achannel = aclip.Play(eAudioPriorityLow, eOnce); 
  if(achannel != null) achannel.Volume = volume;
}

bool Sound_IsAmbientQueued()
{
  if(_ac_amb == null) return false;
  
  return _ac_amb.IsPlaying && _ac_amb.PlayingClip != _queue_amb;
}

void Sound_AmbientQueueRandom(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5, AudioClip* ac_6)
{
  if(_ac_amb != null) {
    if(Sound_IsAmbientQueued()) return;
  }
  
  AudioClip* amb = _GetRandomClip(n, ac_1, ac_2, ac_3, ac_4, ac_5, ac_6);
  
  if(_ac_amb != null) {
    if(_ac_amb.IsPlaying) {
      _ac_amb = amb.PlayQueued(eAudioPriorityHigh, eOnce);
      _queue_amb = amb;
    } else {  
      _ac_amb = amb.Play(eAudioPriorityHigh, eOnce);
    }
  } else {
    _ac_amb = amb.Play(eAudioPriorityHigh, eOnce);    
  }
  
  if( _ac_amb != null) _ac_amb.Volume = 100;
}

void Sound_AmbientTween(float timing, int volume, TweenEasingType type, TweenStyle style)
{
  if(_ac_amb == null) return;
  
  _ac_amb.TweenVolume(timing, volume, type, style);
}

void Sound_AmbientSetVolume(int vol)
{
  if( _ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Volume = vol; 
}

void Sound_AmbientStop() 
{
  if(_ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Stop();
}


bool Sound_IsCricketsQueued()
{
  if(_ac_ckt == null) return false;
  
  return _ac_ckt.IsPlaying && _ac_ckt.PlayingClip != _queue_ckt;
}

void Sound_CricketsQueueRandom(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5, AudioClip* ac_6)
{
  if(_ac_ckt != null) {
    if(Sound_IsCricketsQueued()) return;
  }
  
  AudioClip* ckt = _GetRandomClip(n, ac_1, ac_2, ac_3, ac_4, ac_5, ac_6);
  
  if(_ac_ckt != null) {
    if(_ac_ckt.IsPlaying) {
      _ac_ckt = ckt.PlayQueued(eAudioPriorityHigh, eOnce);
      _queue_ckt = ckt;
    } else {  
      _ac_ckt = ckt.Play(eAudioPriorityHigh, eOnce);
    }
  } else {
    _ac_ckt = ckt.Play(eAudioPriorityHigh, eOnce);    
  }
  
  if( _ac_ckt != null) _ac_ckt.Volume = 100;
}

void Sound_CricketsTween(float timing, int volume, TweenEasingType type, TweenStyle style)
{
  if(_ac_ckt == null) return;
  
  _ac_ckt.TweenVolume(timing, volume, type, style);
}

void Sound_CricketsSetVolume(int vol)
{
  if( _ac_ckt != null && _ac_ckt.IsPlaying) _ac_ckt.Volume = vol; 
}

void Sound_CricketsStop() 
{
  if(_ac_ckt != null && _ac_ckt.IsPlaying) _ac_ckt.Stop();
}


void Sound_MusicPlay(AudioClip* mus)
{
  if(_ac_mus != null) {
    if(_ac_mus.PlayingClip != mus) _ac_mus = mus.Play(eAudioPriorityHigh, eRepeat);
  } else {  
    _ac_mus = mus.Play(eAudioPriorityHigh, eRepeat);
  }
  if(_ac_mus != null) _ac_mus.Volume = 80;
}

void Sound_MusicFadeOut(float time)
{
  if(_ac_mus != null) _ac_mus.TweenFadeOut(time, eEaseLinearTween, eNoBlockTween);
}

void Sound_MusicStop()
{
  if( _ac_mus != null && _ac_mus.IsPlaying) _ac_mus.Stop();
}

void Sound_WindPlay(AudioClip* wind)
{
  _ac_wind = wind.Play(eAudioPriorityLow, eRepeat);
}

void Sound_WindVolume(int volume)
{
  if(_ac_wind == null ) return;
  
  _ac_wind.Volume = volume;
}

void Sound_WindStop()
{
  if(_ac_wind != null  && _ac_wind.IsPlaying) _ac_wind.Stop();
}


void Sound_BreathPlay(AudioClip* breath_clip)
{
  _ac_breath = breath_clip.Play(eAudioPriorityNormal, eRepeat);
  if(_ac_breath != null) _ac_breath.Volume = 0;
}

void Sound_BreathAdjust(int volume, int speed)
{
  if(_ac_breath == null  || !_ac_breath.IsPlaying) return;
  
  _ac_breath.Volume = volume;
  _ac_breath.Speed = speed;
}

void Sound_BreathStop()
{
  if(_ac_breath != null  && _ac_breath.IsPlaying) _ac_wind.Stop();  
}

void Sound_BreathSetRandomInitTime()
{
  if(_ac_breath == null  || !_ac_breath.IsPlaying) return;

  int pos;
  switch(Random(2)) {
    case 0: pos = 500; break;
    case 1: pos = 5000; break;
    case 2: pos = 11000; break;
  }
  _ac_breath.SeekMs(pos);
}

void on_event (EventType event, int data)
{
  switch(event) {
    // called just before the room's 'Player Enters Room' event occurs
    case eEventEnterRoomBeforeFadein: // data = new room number
    break;
    
    // called just after the room's 'Player Leaves Room' event occurs
    case eEventLeaveRoom: //  data = room number they are leaving
      if(_ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Stop();
    break;
  }
}