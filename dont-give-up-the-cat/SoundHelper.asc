// new module script
int _previous_rnd;
AudioChannel* _ac_mus;

int _previous_amb_rnd;
AudioChannel* _ac_amb;
AudioClip* _queue_amb;

AudioChannel* _ac_ckt;
int _previous_ckt_rnd;
AudioClip* _queue_ckt;

void Sound_SFXPlay(AudioClip* sfx)
{
  sfx.Play(eAudioPriorityHigh, eOnce);  
}

void PlayRandomSound(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5, AudioClip* ac_6)
{
  int rnd = Random(n-1);
  AudioChannel* achannel;
  
  while(rnd == _previous_rnd) {
    rnd = Random(n-1);
  }
  
  switch(rnd)
  {
    case 0:
      achannel = ac_1.Play(eAudioPriorityLow, eOnce);
    break;
    case 1:
      achannel = ac_2.Play(eAudioPriorityLow, eOnce);    
    break;
    case 2:
      achannel = ac_3.Play(eAudioPriorityLow, eOnce);    
    break;
    case 3:
      achannel = ac_4.Play(eAudioPriorityLow, eOnce);    
    break;
    case 4:
      achannel = ac_5.Play(eAudioPriorityLow, eOnce);    
    break;
    case 4:
      achannel = ac_6.Play(eAudioPriorityLow, eOnce);    
    break;
  } 
  _previous_rnd = rnd;
  
  if(achannel != null) achannel.Volume = volume;
}

bool Sound_IsAmbientQueued()
{
  if(_ac_amb == null) return false;
  
  return _ac_amb.IsPlaying && _ac_amb.PlayingClip != _queue_amb;
}

void Sound_AmbientQueueRandom(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5)
{
  if(_ac_amb != null) {
    if(Sound_IsAmbientQueued()) return;
  }
  
  int rnd;    
  do {
    rnd = Random(n-1);    
  } while(rnd == _previous_amb_rnd);
  
  AudioClip* amb;
  switch(rnd)
  {
    case 0:
      amb = ac_1;
    break;
    case 1:
      amb = ac_2;
    break;
    case 2:
      amb = ac_3;
    break;
    case 3:
      amb = ac_4;
    break;
    case 4:
      amb = ac_5;
    break;
  } 
  _previous_amb_rnd = rnd;
  
  if(_ac_amb != null) {
    if(_ac_amb.IsPlaying) {
      _ac_amb = amb.PlayQueued(eAudioPriorityHigh, eOnce);
      _queue_amb = amb;
    } else {  
      _ac_amb = amb.Play(eAudioPriorityHigh, eOnce);
    }
  } else {
    _ac_amb = amb.Play(eAudioPriorityHigh, eOnce);    
  }
  
  if( _ac_amb != null) _ac_amb.Volume = 100;
}

void Sound_AmbientTween(float timing, int volume, TweenEasingType type, TweenStyle style)
{
  if(_ac_amb == null) return;
  
  _ac_amb.TweenVolume(timing, volume, type, style);
}


void Sound_AmbientSetVolume(int vol)
{
  if( _ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Volume = vol; 
}

void Sound_AmbientStop() 
{
  if(_ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Stop();
}


bool Sound_IsCricketsQueued()
{
  if(_ac_ckt == null) return false;
  
  return _ac_ckt.IsPlaying && _ac_ckt.PlayingClip != _queue_ckt;
}

void Sound_CricketsQueueRandom(int volume, int n, AudioClip* ac_1,  AudioClip* ac_2,  AudioClip* ac_3,  AudioClip* ac_4,  AudioClip* ac_5)
{
  if(_ac_ckt != null) {
    if(Sound_IsCricketsQueued()) return;
  }
  
  int rnd;    
  do {
    rnd = Random(n-1);    
  } while(rnd == _previous_amb_rnd);
  
  AudioClip* ckt;
  switch(rnd)
  {
    case 0:
      ckt = ac_1;
    break;
    case 1:
      ckt = ac_2;
    break;
    case 2:
      ckt = ac_3;
    break;
    case 3:
      ckt = ac_4;
    break;
    case 4:
      ckt = ac_5;
    break;
  } 
  _previous_ckt_rnd = rnd;
  
  if(_ac_ckt != null) {
    if(_ac_ckt.IsPlaying) {
      _ac_ckt = ckt.PlayQueued(eAudioPriorityHigh, eOnce);
      _queue_ckt = ckt;
    } else {  
      _ac_ckt = ckt.Play(eAudioPriorityHigh, eOnce);
    }
  } else {
    _ac_ckt = ckt.Play(eAudioPriorityHigh, eOnce);    
  }
  
  if( _ac_ckt != null) _ac_ckt.Volume = 100;
}

void Sound_CricketsTween(float timing, int volume, TweenEasingType type, TweenStyle style)
{
  if(_ac_ckt == null) return;
  
  _ac_ckt.TweenVolume(timing, volume, type, style);
}

void Sound_CricketsSetVolume(int vol)
{
  if( _ac_ckt != null && _ac_ckt.IsPlaying) _ac_ckt.Volume = vol; 
}

void Sound_CricketsStop() 
{
  if(_ac_ckt != null && _ac_ckt.IsPlaying) _ac_ckt.Stop();
}


void Sound_MusicPlay(AudioClip* mus)
{
  _ac_mus = mus.Play(eAudioPriorityHigh, eRepeat);
  if(_ac_mus != null) _ac_mus.Volume = 80;
}

void Sound_MusicFadeOut(float time)
{
  if(_ac_mus != null) _ac_mus.TweenFadeOut(time, eEaseLinearTween, eNoBlockTween);
}

void Sound_MusicStop()
{
  if( _ac_mus != null && _ac_mus.IsPlaying) _ac_mus.Stop();
}

void on_event (EventType event, int data)
{
  switch(event) {
    // called just before the room's 'Player Enters Room' event occurs
    case eEventEnterRoomBeforeFadein: // data = new room number
    break;
    
    // called just after the room's 'Player Leaves Room' event occurs
    case eEventLeaveRoom: //  data = room number they are leaving
      if(_ac_amb != null && _ac_amb.IsPlaying) _ac_amb.Stop();
    break;
  }
}