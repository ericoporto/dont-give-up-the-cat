// new module script
float  _last_step_sound_x, _last_step_sound_y;

static void GameSounds::UpdateForestAmbient(TerrainType terrain_type)
{
  bool just_played = false;
  int amb_vol = -1;
  int ckt_vol = -1;
  switch(terrain_type) {
    case eTT_ClearanceHome: amb_vol = 65; ckt_vol = 10; break;
    case eTT_ClearanceGFlowers:
    case eTT_ClearanceGHouse:
    case eTT_ClearanceGStones: amb_vol = 100;  ckt_vol = 1; break;
    case eTT_Clearance: amb_vol = 95;  ckt_vol = 20; break;
    case eTT_GrassyRock:
    case eTT_FlowersBlue:
    case eTT_Land: amb_vol = 75;  ckt_vol = 50; break;
    case eTT_LandBorder: amb_vol = 50;  ckt_vol = 70; break;
    case eTT_Tree: amb_vol = 20;  ckt_vol = 100; break;
  }
  
  if(!Sound_IsAmbientQueued()) {
    if(amb_vol == -1) amb_vol = Random(20) + 80;
    just_played = true;
    Sound_AmbientQueueRandom(amb_vol, 3, aAtmosphere_1, aAtmosphere_2, aAtmosphere_3);
  }
  
  if(!Sound_IsCricketsQueued()) {
    if(ckt_vol == -1) ckt_vol = Random(20) + 80;
    Sound_CricketsQueueRandom(ckt_vol, 4, aCricket_1, aCricket_2, aBug_1, aBug_2);
  }  
  
  if(amb_vol == -1 || just_played) return;
  
  Sound_AmbientTween(0.9, amb_vol, eEaseLinearTween, eNoBlockTween);
}

static bool GameSounds::StepSoundWalkDistBiggerThanSq(float x, float y, float threshold)
{
  return (_last_step_sound_x - x)*(_last_step_sound_x - x)+(_last_step_sound_y - y)*(_last_step_sound_y - y) >  threshold;
}

static void GameSounds::PlayStepSound(float x, float y)
{ 
  _last_step_sound_x = x;
  _last_step_sound_y = y;
    
  PlayRandomSound(Random(10)+22, 6, aStep_dryleave_01, aStep_dryleave_02, aStep_dryleave_03, aStep_dryleave_04, aStep_dryleave_05, aStep_dryleave_06);
}
