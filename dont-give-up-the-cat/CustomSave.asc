// new module script
bool save_scheduled;
bool after_save_scheduled;
bool cancelRestoreKP;
int save_scheduled_slot;
String save_scheduled_string;
bool originalGuiVisibility [255];
Timer * AfterSavingAnimation;
int autosaveslot;
bool skip_nexttime;

bool saved_gui_visibility;

bool block_saves;

function HideAllGui(){ 
  int guicount = Game.GUICount;
  int i=0;
  while(i<guicount){
    if(gui[i]!=null){
      if(gSaving.ID != gui[i].ID){
        gui[i].Visible=false;
      }
    }
    i++;
  }
}

function SaveAllGuiVisibility(){ 
  saved_gui_visibility = true;
  cancelRestoreKP = false;
  int guicount = Game.GUICount;
  int i=0;
  while(i<guicount){
    if(gui[i]!=null){
      if((gSaving.ID != gui[i].ID)){
        originalGuiVisibility[i] = gui[i].Visible;
      }
    }
    i++;
  }
}

function RestoreAllGuiVisibility(){ 
  if(saved_gui_visibility){
  
    int guicount = Game.GUICount;
    int i=0;
    while(i<guicount){
      if(gui[i]!=null){
        if((gSaving.ID != gui[i].ID)){
          if(!cancelRestoreKP){
            gui[i].Visible = originalGuiVisibility[i];
          } else {
            if( gMenu.ID != gui[i].ID && 
                gMenu_SaveGame.ID != gui[i].ID){
              gui[i].Visible = originalGuiVisibility[i];
            }
          }
        }
      }
      i++;
    }
    if(cancelRestoreKP){
      gSaving.Visible = false;
    }
  
  }
  saved_gui_visibility = false;
}

function scheduleSave(int slot, String description){
  save_scheduled = true;
  after_save_scheduled=false;
  save_scheduled_slot = slot;
  save_scheduled_string = description;
}

static void CustomSave::Save(int slot,  String description) {
  if(String.IsNullOrEmpty(description)){
    DateTime *dt = DateTime.Now;    
    String roomname = Room.GetTextProperty("roomname");
    description = String.Format("Manualsave{%s}%02d:%02d@%02d/%02d/%04d", roomname, dt.Hour, dt.Minute, dt.Month, dt.DayOfMonth, dt.Year);
  }
  scheduleSave(slot, description);
}

static void CustomSave::SaveNoSchedule(int slot,  String description) {  
  if(String.IsNullOrEmpty(description)){
    DateTime *dt = DateTime.Now;    
    String roomname = Room.GetTextProperty("roomname");
    description = String.Format("Manualsave{%s}%02d:%02d", roomname, dt.Hour, dt.Minute);
  }
  gSaving.Transparency = 0;
  gSaving.Visible = true;
  btn_animated_saving.Animate(VIEW_SAVING, 0, 1, eRepeat);

  Wait(1);
  
  SaveGameSlot(slot, description);
    
  AfterSavingAnimation = Timer.StartRT(0.6, eOnce);
  gSaving.TweenTransparency(0.6, 100, eEaseInBackTween, eNoBlockTween);
}

static void CustomSave::setAutoSaveSlot(int sl){
  autosaveslot = sl;
}

static int CustomSave::getAutoSaveSlot(){
  return autosaveslot;
}

static void CustomSave::doAutoSave() {  
  DateTime *dt = DateTime.Now;    
  String roomname = Room.GetTextProperty("roomname");
  //String Temp = String.Format("Autosave - $s -  %02d/%02d/%02d at %02d:%02d", roomname, dt.DayOfMonth, dt.Month, dt.Year, dt.Hour, dt.Minute);
  String Temp = String.Format("Autosave{%s}%02d:%02d@%02d/%02d/%04d", roomname, dt.Hour, dt.Minute, dt.Month, dt.DayOfMonth, dt.Year);
  CustomSave.Save(autosaveslot, Temp);  
}

static void CustomSave::cancelRestoreKP(){
  cancelRestoreKP = true;
  GameConfig.LoadCFG();
}

bool shouldPreventSave(){
  return block_saves || bool_in_dialog;
}

void on_event(EventType e, int d){
  if(e==eEventLeaveRoom || e==eEventEnterRoomBeforeFadein){
    block_saves = false;        
  }
}

function repeatedly_execute() { 
  if(shouldPreventSave()){
    return;  
  }
  
  if(bool_in_dialog){
    skip_nexttime = true;
    return;  
  }
  
  
  if(skip_nexttime){
    skip_nexttime = false;
    return;  
  }
  
  if(AfterSavingAnimation!=null){
    if(AfterSavingAnimation.EvtExpired){
      gSaving.Visible = false;
      btn_animated_saving.Animate(VIEW_SAVING, 0, 1, eOnce);
    }  
  }
  if (save_scheduled) {
    if(!bool_in_dialog){
      SaveAllGuiVisibility();
      HideAllGui();
      Wait(1);
    }
    CustomSave.SaveNoSchedule(save_scheduled_slot, save_scheduled_string);
    save_scheduled_slot = 0;
    save_scheduled_string = "";       
    save_scheduled = false;
    if(!bool_in_dialog){
      after_save_scheduled = true;
    }
  } else if(after_save_scheduled){
    RestoreAllGuiVisibility();
    after_save_scheduled = false;
  }
}

function game_start(){
  btn_animated_saving.Animate(VIEW_SAVING, 0, 2, eRepeat);
  CustomSave.setAutoSaveSlot(99);  
}