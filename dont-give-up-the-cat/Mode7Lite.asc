// new module script
// Track script
struct _m7Vector {
  float x, y, z;
};

float point_angle, _angle, z_t, dist, z_dist;

int precision = 1000000;


// math utilities
#region MATH_UTILITIES
int
_m7_max(int a, int b)
{
  if (a > b)
    return a;
  return b;
}

int
_m7_min(int a, int b)
{
  if (a < b)
    return a;
  return b;
}

int
_m7_clamp(int v, int min, int max)
{
  return _m7_min(max, _m7_max(v, min));
}

float
_m7_maxf(float a, float b)
{
  if (a > b)
    return a;
  return b;
}

float
_m7_minf(float a, float b)
{
  if (a < b)
    return a;
  return b;
}

float
_m7_clampf(float v, float min, float max)
{
  return _m7_minf(max, _m7_maxf(v, min));
}
#endregion //MATH_UTILITIES

int _NormalizeAngle(int theta) // I verified this is working
{
  
  if(theta >= 0 && theta <= 359) return theta;
  
  while (theta < 0) theta += 360;
  if (theta > 359) theta = theta % 360;
  return theta;
}

void Mode7Object::SetPosition(float x, float y, float z)
{
  this.X = x;
  this.Y = y;
  this.Z = z;  
}

void Mode7Object::Draw(DrawingSurface* ds)
{
  if(!this.Visible) return;
  if(this.ScreenWidth > Screen.Width*2 || this.ScreenHeight > Screen.Height*2) return;
  
  ds.DrawImage(this.ScreenX, this.ScreenY, this.Graphic, 0, this.ScreenWidth, this.ScreenHeight);  
}

void Mode7::SetBgColor(int bg_color)
{
  this._bg_color = bg_color;
}

void Mode7::SetSkyColor(int sky_color)
{
  this._sky_color = sky_color;
}

// HACKED around for speed,  only do skybox
protected void Mode7::_DrawTrack3D()
{
  // avoid if parameters don't change
  if(  this._prev_ground_sprite_slot == this._track_sprite_slot &&
    this._prev_camera_angle_x == this._camera_angle_x &&
    this._prev_camera_angle_y == this._camera_angle_y)
  {
    return;  
  }  

  this._track_angle = FloatToInt(-this._camera_angle_y, eRoundNearest);
  this._track_angle = _NormalizeAngle(this._track_angle);

  int hor_y = this._screen_y + this._screen_height/2 - FloatToInt(Maths.Tan(Maths.DegreesToRadians(this._camera_angle_x)) * this._camera_dist, eRoundNearest);
  int sbx = ((this._track_angle*256)/60) % 256 - 256;
  sync_skybox(hor_y, sbx);

  sync_horizon(hor_y);
  
  this._prev_ground_sprite_slot = this._track_sprite_slot;
  this._prev_camera_angle_x = this._camera_angle_x;
  this._prev_camera_angle_y = this._camera_angle_y;
}

void Mode7::SetCamera(float x, float y, float z, float xa, float ya, float focal_length)
{
  this._camera_position_x = x;
  this._camera_position_y = 0.0;
  this._camera_position_z = z;
  this._camera_pos_y_offset = y;
  this._camera_dist = focal_length;
}

void Mode7::TargetCamera(float target_x, float target_y, float target_z,  float teta_angle, eCameraTargetType camType, bool is_lazy) 
{  
  _m7Vector target;
  target.x = target_x;
  target.y = target_y;
  target.z = target_z;  
  
  float camera_angle_target = teta_angle;
  
  
  if (camType == eCameraTarget_FollowBehind)
  {
    // set camera behind target
    float behind = 64.0;
   
    // make it lazy
    if(is_lazy) this._camera_angle_y += (camera_angle_target - this._camera_angle_y) * 0.05;
    else this._camera_angle_y = camera_angle_target;
    
    float sin = Maths.Sin(Maths.DegreesToRadians(this._camera_angle_y));
    float cos = Maths.Cos(Maths.DegreesToRadians(this._camera_angle_y));
    this._camera_position_x = target.x - behind * sin;
    this._camera_position_z = target.z + behind * cos;
    
  }
  else if(camType ==  eCameraTarget_FirstPerson)
  {
    this._camera_angle_y = camera_angle_target;
    
    this._camera_position_x = target.x;
    this._camera_position_y = target.y + this._camera_pos_y_offset;
    this._camera_position_z = target.z;
    
    
  }
  else if (camType == eCameraTarget_Sides) 
  {
    this._camera_position_x = 100.0;
    this._camera_position_z = 100.0;
    float dx = this._camera_position_x-target.x;
    float dz = this._camera_position_z-target.z;
    this._camera_angle_y = -Maths.RadiansToDegrees(Maths.ArcTan2(dx, dz));
    float target_dist = Maths.Sqrt(dx * dx + dz * dz);
    this._camera_angle_x = Maths.RadiansToDegrees(Maths.ArcTan2(this._camera_position_y, target_dist));
    target_dist = target_dist * 3.0;
    if (target_dist < 100.0) target_dist = 100.0;
    this._camera_dist = target_dist;
  }
}

void Mode7::SetViewscreen(int width, int height, int x, int y)
{
  this._screen_x = x;
  this._screen_y = y;
  this._screen_width = width;
  this._screen_height = height;
}

void Mode7::SetGroundSprite(int ground_graphic)
{
  this._track_canvas_size = 512;
  this._track_canvas_y_offset = 512;  // camera position on track_canvas below center
  
  this._track_sprite_slot = ground_graphic;
}

void Mode7::SetHorizonSprite(int horizon_graphic, eHorizonType horizon_type)
{
  this._horizon_sprite_slot = horizon_graphic;
  this._is_horizon_dynamic = horizon_type;
}

void Mode7::DebugKeyPress(eKeyCode k)
{
  if (k == eKeyUpArrow   && this._camera_angle_x > -40.0) this._camera_angle_x -= 1.0;
  if (k == eKeyDownArrow && this._camera_angle_x <  55.0) this._camera_angle_x += 1.0;
  if (k == eKeyPlus   && this._camera_dist < 400.0) this._camera_dist += 1.0;
  if (k == eKeyHyphen && this._camera_dist >  10.0) this._camera_dist -= 1.0;
  if (k == eKeyI) this._camera_pos_y_offset += 1.0;
  if (k == eKeyK) this._camera_pos_y_offset -= 1.0;
  if (k == eKeyO) this._camera_position_x += 1.0;
  if (k == eKeyL) this._camera_position_x -= 1.0;

  // debug
  if (k == eKeyLeftArrow) this._camera_angle_y += 1.0;
  if (k == eKeyRightArrow) this._camera_angle_y -= 1.0;  
}

float Mode7::get_CameraAngleX()
{
  return this._camera_angle_x;
}

void Mode7::set_CameraAngleX(float value)
{
  this._camera_angle_x = _m7_clampf(value, -40.0, 55.0);
}

float Mode7::get_CameraAngleY()
{
  return this._camera_angle_y;
}

void Mode7::set_CameraAngleY(float value)
{
  this._camera_angle_y = _m7_clampf(value, 0.0, 360.0);
}

void Mode7::Draw() 
{  
  this._DrawTrack3D();
}

int Mode7World::GetAngleObjectAndCamera(Mode7Object* m7obj)
{
  float angle_target = m7obj.Angle;
  return _NormalizeAngle(FloatToInt(angle_target - this._camera_angle_y, eRoundNearest));
}

void Mode7World::UpdateAndDrawObjects()
{
  int fnd_objects = 0;
  
  int x2d, y2d, slot, w, h; // in: fnd_list index, obin: all objects list index
  int screen_width = Screen.Width;
  int screen_height = Screen.Height;
  
  // get object's position relative to camera and check distance
  _m7Vector o;
  for (int i=0; i < this.ObjectCount; i++) {
    Mode7Object* obj = this.Objects[i];
    o.x = obj.X;
    o.z = obj.Z;
    obj.ScreenVisible = false;
   
    // translate object's x,z to camera's coords
    float cox = o.x - this._camera_position_x;
    float coz = -(o.z - this._camera_position_z);
    
    // rotate by negative camera's y angle
    float sin = Maths.Sin(Maths.DegreesToRadians(this._camera_angle_y));
    float cos = Maths.Cos(Maths.DegreesToRadians(this._camera_angle_y));
    o.x = cox * cos - coz * sin;
    o.z = cox * sin + coz * cos;
    
    // object is in front of camera
    if (o.z > 0.0) {
      
      // angle between line from camera to object and ground
      float obj_angle = Maths.ArcTan2(this._camera_position_y - this.Objects[i].Y, o.z);
      dist = o.z / Maths.Cos(obj_angle);
      // translate x angle to camera
      obj_angle -= Maths.DegreesToRadians(this._camera_angle_x);
      o.y = dist * Maths.Sin(obj_angle);
      z_dist = dist * Maths.Cos(obj_angle);
      
      if (z_dist > 0.1 && z_dist < 1024.0) {
        
        float vo_x = o.x;
        float vo_y = o.y;
        float v_zd = z_dist;
        
        // init z-stuff        
        float f = this._camera_dist / v_zd;
        float factor = obj.Factor;
        
        slot = obj.Graphic;   
        
        // turn into 2D coords
        x2d = this._screen_x + this._screen_width/2  + FloatToInt(vo_x * f, eRoundNearest);
        y2d = this._screen_y + this._screen_height/2 + FloatToInt(vo_y * f, eRoundNearest);
        // size
        w = FloatToInt(IntToFloat(Game.SpriteWidth[slot])  * f * factor, eRoundNearest);
        h = FloatToInt(IntToFloat(Game.SpriteHeight[slot]) * f * factor, eRoundNearest);
       
        int obj_d_x = x2d - w/2;
        int obj_d_y = y2d - (h*9/10);
        
        
        obj.ScreenX = obj_d_x;
        obj.ScreenY = obj_d_y;
        obj.ScreenWidth = w;
        obj.ScreenHeight = h;
        // some hacks below to avoid crashing the Direct3D renderer
        obj.ScreenVisible = obj.Visible && w < 2048 && obj_d_x < screen_width && obj_d_y < screen_height && w >= 1;
        
        obj.ScreenZOrder = FloatToInt(10000.0 / v_zd); 
        
        fnd_objects++;
      }
    }
    
    // mode7lite hacked to do all in one loop
    if(obj.ScreenVisible == false && this.Overlays[i] != null) {
      this.Overlays[i].Transparency = 100;
      this.Overlays[i].X = Screen.Width;
    } else {           
      if(this.Overlays[i] == null || !this.Overlays[i].Valid) {
        this.Overlays[i] = Overlay.CreateGraphical(obj.ScreenX, obj.ScreenY, obj.Graphic, true);
      } 
      else if(this.Overlays[i].Graphic != obj.Graphic) {
        this.Overlays[i].Graphic = obj.Graphic;      
      }
      
      Overlay* ovr = this.Overlays[i];
      
      if(ovr.Transparency != obj.Transparency) ovr.Transparency = ClampI(obj.Transparency, 0, 100);
      if(ovr.X != obj.ScreenX) ovr.X = obj.ScreenX;
      if(ovr.Y != obj.ScreenY) ovr.Y = obj.ScreenY;
      if(ovr.Width != obj.ScreenWidth) ovr.Width = obj.ScreenWidth;
      if(ovr.Height != obj.ScreenHeight) ovr.Height = obj.ScreenHeight;
      if(ovr.ZOrder != obj.ScreenZOrder) ovr.ZOrder = obj.ScreenZOrder;     
    }
  }
    
  // no object visible?
}

void Mode7World::DrawWorld() 
{  
  this._DrawTrack3D();
}

Mode7Object* Mode7World::AddObject(int x, int z, float factor, int graphic)
{
  if (this.ObjectCount == MAX_OBJECTS) return null;
    
  Mode7Object* obj = new Mode7Object;
  obj.Visible = true;
  obj.X = IntToFloat(x);
  obj.Y = 0.0;
  obj.Z = IntToFloat(z);
  obj.Factor = factor;
  obj.Graphic = graphic;
  
  this.Objects[this.ObjectCount] = obj;
  this.Overlays[this.ObjectCount] = Overlay.CreateGraphical(Screen.Width, Screen.Height, graphic, true);
  this.ObjectCount++;
  return this.Objects[this.ObjectCount-1];
}

Mode7Object* Mode7World::GetObject(float x, float z, float radius, int graphic_count, int graphics[])
{
  float sq_radius = radius * radius;

  for (int i=0; i < this.ObjectCount; i++) {
    Mode7Object* obj = this.Objects[i];
    
    if(!obj.Visible) continue;
    
    float d_x = x - obj.X;
    float d_z = z - obj.Z;
    
    float sq_distance = d_x * d_x + d_z * d_z;
    
    if(sq_distance <= sq_radius) {
      for(int j=0; j<graphic_count; j++) {
        int graphic = graphics[j];
        // Display("TEST %d == %d", obj.Graphic, graphic);
        if(obj.Graphic == graphic) return obj;
      }
    }
  }
  return null;
}

void Mode7World::AddExternalObject(Mode7Object* m7obj)
{
  if (this.ObjectCount == MAX_OBJECTS) return;
  this.Objects[this.ObjectCount] = m7obj;
  
  this.Overlays[this.ObjectCount] = Overlay.CreateGraphical(Screen.Width, Screen.Height, m7obj.Graphic, true);
  
  this.ObjectCount++;  
}

void Mode7World::RemoveObject(int object_id)
{
  if (this.ObjectCount == 0 || object_id >= this.ObjectCount) return;
  
  // removes object at the top
  if(object_id < 0) {
    this.ObjectCount--;
    
    this.Objects[this.ObjectCount] = null;
    if(this.Overlays[this.ObjectCount] != null && this.Overlays[this.ObjectCount].Valid) {
      this.Overlays[this.ObjectCount].Transparency = 100;
      this.Overlays[this.ObjectCount].Remove();
    }
    this.Overlays[this.ObjectCount] = null;
    
    return;
  }
  
  // removes object in the middle of array
  for(int i=object_id; i<this.ObjectCount; i++) {
    this.Objects[i] = this.Objects[i+1];
    this.Overlays[i] = this.Overlays[i+1];
  }
  
  this.ObjectCount--;
  
  this.Objects[this.ObjectCount] = null;
  if(this.Overlays[this.ObjectCount] != null && this.Overlays[this.ObjectCount].Valid) {
    this.Overlays[this.ObjectCount].Transparency = 100;
    this.Overlays[this.ObjectCount].Remove();
  }
  this.Overlays[this.ObjectCount] = null;
  
}

void Mode7World::RemoveAllsObjects()
{
  while(this.ObjectCount > 0) {
    this.RemoveObject(-1);
  }
}